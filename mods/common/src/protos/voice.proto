/*
 * Copyright (C) 2024 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package fonoster.voice.v1beta2;

// The voice service definition
service Voice {
  rpc CreateSession(stream VoiceInStream) returns (stream VoiceOutStream) {}
}

// CreateSessionRequest is the request message for the CreateSession method
message CreateSessionRequest {
  // The account making the request on behalf of the caller
  string access_key_id = 1;
  // Reference to an application living in the platform
  string app_ref = 2;
  // gRPC endpoint for the voice service
  string endpoint = 3;
  // PSTN number or SIP URI associated with the session
  string ingress_number = 4;
  // The caller ID for the phone calling from the
  string caller_id = 5;
  // The caller number for the phone calling from the
  string caller_number = 6;
  // The session ID generated by the Media Server
  string session_id = 7;
  // Use this token to validate the provenance of the request
  // If the app_ref is provided, the token must include the app_ref as a claim
  string session_token = 8;
  // Metadata associated with the session
  map<string, string> metadata = 9;
}

// Playback finished event
message PlaybackFinishedEvent {
  string playback_id = 1;
}

// Recording finished event
message RecordingFinishedEvent {
  string recording_id = 1;
}

// DTMF finished event
message DtmfFinishedEvent {
  string session_id = 1;
}

// Session closed event
message SessionClosedEvent {
  string session_id = 1;
}

// Answer command
message AnswerCommand {
  string session_id = 1;
}

// Hangup command
message HangupCommand {
  string session_id = 1;
}

// Play command
message PlayCommand {
  string session_id = 1;
  string url = 2;
}

// Gather command
message GatherCommand {
  enum Source {
    DTMF = 0;
    SPEECH = 1;
    DTMF_SPEECH = 2;
    SPEECH_DTMF = 3;
  }
  string session_id = 1;
  string finish_on_key = 2;
  int32 num_digits = 3;
  int32 timeout = 4;
  Source source = 5;
}

// Mute command
message MuteCommand {
  string session_id = 1;
  bool mute = 2;
}

// Dial command
message DialCommand {
  string session_id = 1;
  string destination = 2;
  string caller_id = 3;
  string caller_number = 4;
}

// VoiceInStream is the input stream for the voice service
message VoiceInStream {
  oneof content {
    // Initial request to create a new session
    CreateSessionRequest request = 1;
    // Playback finished event
    PlaybackFinishedEvent playback_finished = 2;
    // Recording finished event
    RecordingFinishedEvent recording_finished = 3;
    // DTMF finished event
    DtmfFinishedEvent dtmf_finished = 4;
    // Session closed event
    SessionClosedEvent session_closed = 5;
  }
}

// VoiceOutStream is the output stream for the voice service
message VoiceOutStream {
  oneof content {
    // Command to accept the call
    AnswerCommand answer_command = 2;
    // Command to play an audio file
    PlayCommand play_command = 3;
    // Command to hangup the call
    HangupCommand hangup_command = 4;
    // Command to gather DTMF or speech
    GatherCommand gather_command = 5;
    // Command to mute or unmute the call
    MuteCommand mute_command = 6;
    // Command to dial a number
    DialCommand dial_command = 7;
  }
}
