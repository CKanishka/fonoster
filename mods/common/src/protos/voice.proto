/*
 * Copyright (C) 2024 by Fonoster Inc (https://fonoster.com)
 * http://github.com/fonoster/fonoster
 *
 * This file is part of Fonoster
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    https://opensource.org/licenses/MIT
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package fonoster.voice.v1beta2;

// The voice service definition
service Voice {
  rpc CreateSession(stream VoiceInStream) returns (stream VoiceOutStream) {}
}

// CreateSessionRequest is the request message for the CreateSession method
message CreateSessionRequest {
  // The account making the request on behalf of the caller
  string access_key_id = 1;
  // Reference to an application living in the platform
  string app_ref = 2;
  // gRPC endpoint for the voice service
  string endpoint = 3;
  // PSTN number or SIP URI associated with the session
  string ingress_number = 4;
  // The caller ID for the phone calling from the
  string caller_id = 5;
  // The caller number for the phone calling from the
  string caller_number = 6;
  // The session ID generated by the Media Server
  string session_id = 7;
  // Use this token to validate the provenance of the request
  // If the app_ref is provided, the token must include the app_ref as a claim
  string session_token = 8;
  // Metadata associated with the session
  map<string, string> metadata = 9;
}

// Common request for verbs
message VerbRequest {
  string session_id = 1;
}

// Common response for verbs
message VerbResponse {
  string session_id = 1;
}

// Request to play a sound
message PlayRequest {
  // The session ID generated by the Media Server
  string session_id = 1;
  // The URL of the sound to play
  string url = 2;
}

// PlayDtmfRequest is the request message for the PlayDtmf method
message PlayDtmfRequest {
  // The session ID generated by the Media Server
  string session_id = 1;
  // The digits to play
  string digits = 2;
}

// Request to mute or unmute the call
message MuteRequest {
  enum MuteDirection {
    IN = 0;
    OUT = 1;
    BOTH = 2;
  }
  // The session ID generated by the Media Server
  string session_id = 1;
  // The direction to mute
  MuteDirection direction = 2;
}

// Request to play a sound
message PlayResponse {
  // The session ID generated by the Media Server
  string session_id = 1;
  // The playback ID generated by the Media Server
  string playback_id = 2;
}

// VoiceInStream is the input stream for the voice service
message VoiceInStream {
  oneof content {
    // Initial request to create a new session
    CreateSessionRequest request = 1;
    // Command to accept the call
    VerbResponse answer_response = 2;
    // Response to a play request
    PlayResponse play_response = 3;
    // Response to a hangup request
    VerbResponse hangup_response = 4;
    // Response to a mute request
    VerbResponse mute_response = 5;
    // Response to a unmute request
    VerbResponse unmute_response = 6;
    // Response to a play dtmf request
    VerbResponse play_dtmf_response = 7;
  }
}

// VoiceOutStream is the output stream for the voice service
message VoiceOutStream {
  oneof content {
    // Request to accept the call
    VerbRequest answer_request = 1;
    // Request to play a sound
    PlayRequest play_request = 2;
    // Request to hangup the call
    VerbRequest hangup_request = 3;
    // Request to mute the call
    MuteRequest mute_request = 4;
    // Request to unmute the call
    MuteRequest unmute_request = 5;
    // Request to play dtmf
    PlayDtmfRequest play_dtmf_request = 6;
  }
}
