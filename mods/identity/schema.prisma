generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("IDENTITY_DATABASE_URL")
}

model User {
  id                  String   @id @default(uuid())
  email               String   @unique @db.VarChar(255)
  phoneNumber         String?  @db.VarChar(20)
  accessKeyId         String   @unique @db.VarChar(255)
  password            String   @map("password_hash") /// @encrypted
  name                String   @db.VarChar(60)
  avatar              String?  @db.VarChar(255)
  emailVerified       Boolean  @default(false) @map("email_verified")
  phoneNumberVerified Boolean  @default(false) @map("phone_number_verified")
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt           DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)

  // Relations
  ownedWorkspaces Workspace[] // Workspaces owned by the user
  memberships     WorkspaceMember[] // Workspaces the user is a member of

  // Indexes and maps
  @@index([email], type: Hash)
  @@map("users")
}

model Workspace {
  id          String @id @default(uuid())
  accessKeyId String @unique @db.VarChar(255)
  name        String @db.VarChar(60)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)

  // Relations
  owner   User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String
  members WorkspaceMember[]
  apiKeys APIKey[]

  // Indexes and maps
  @@index([name], type: Hash)
  @@map("workspaces")
}

model WorkspaceMember {
  id     String                @id @default(uuid())
  status WorkspaceMemberStatus
  role   WorkspaceMemberRole   @default(USER)

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz(3)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

enum WorkspaceMemberStatus {
  PENDING
  ACTIVE

  @@map("workspace_member_status")
}

enum WorkspaceMemberRole {
  OWNER
  ADMIN
  USER

  @@map("workspace_member_role")
}

model APIKey {
  id              String     @id @default(uuid())
  accessKeyId     String     @unique @db.VarChar(255)
  accessKeySecret String     @db.VarChar(255) /// @encrypted
  role            APIKeyRole @default(WORKSPACE_ADMIN)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz(3)
  expiresAt DateTime? @map("expires_at") @db.Timestamptz(3)

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @map("workspace_id")

  // Indexes and maps
  @@index([accessKeyId], type: Hash)
  @@map("api_keys")
}

enum APIKeyRole {
  WORKSPACE_ADMIN

  @@map("api_key_role")
}
