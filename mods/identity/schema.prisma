generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/identity-client"
}

datasource db {
  provider = "postgresql"
  url      = env("IDENTITY_DATABASE_URL")
}

model User {
  ref                 String   @id @default(uuid())
  accessKeyId         String   @unique @map("access_key_id") @db.VarChar(255)
  name                String   @db.VarChar(60)
  email               String   @unique @db.VarChar(255)
  emailVerified       Boolean  @default(false) @map("email_verified")
  password            String   @map("password_hash") /// @encrypted
  phoneNumber         String?  @map("phone_number") @db.VarChar(20)
  phoneNumberVerified Boolean  @default(false) @map("phone_number_verified")
  avatar              String?  @db.VarChar(255)
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt           DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)

  // Relations
  ownedWorkspaces Workspace[] // Workspaces owned by the user
  memberships     WorkspaceMember[] // Workspaces the user is a member of

  // Indexes and maps
  @@index([email], type: Hash)
  @@index([accessKeyId], type: Hash)
  @@map("users")
}

model Workspace {
  ref         String   @id @default(uuid())
  accessKeyId String   @unique @map("access_key_id") @db.VarChar(255)
  name        String   @db.VarChar(60)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)

  // Relations
  owner    User              @relation(fields: [ownerRef], references: [ref], onDelete: Cascade)
  ownerRef String            @map("owner_ref")
  members  WorkspaceMember[]
  apiKeys  APIKey[]

  // Indexes and maps
  @@index([accessKeyId], type: Hash)
  @@index([ownerRef], type: Hash)
  @@map("workspaces")
}

model WorkspaceMember {
  ref       String                @id @default(uuid())
  status    WorkspaceMemberStatus @default(PENDING)
  role      WorkspaceMemberRole   @default(USER)
  createdAt DateTime              @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime              @default(now()) @map("updated_at") @db.Timestamptz(3)

  // Relations
  user         User      @relation(fields: [userRef], references: [ref], onDelete: Cascade)
  userRef      String    @map("user_ref")
  workspace    Workspace @relation(fields: [workspaceRef], references: [ref], onDelete: Cascade)
  workspaceRef String    @map("workspace_ref")

  @@unique([userRef, workspaceRef])
  @@map("workspace_members")
}

model APIKey {
  ref             String     @id @default(uuid())
  accessKeyId     String     @unique @map("access_key_id") @db.VarChar(255)
  accessKeySecret String     @map("access_key_secret") @db.VarChar(255) /// @encrypted
  role            APIKeyRole @default(WORKSPACE_ADMIN)
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime   @default(now()) @map("updated_at") @db.Timestamptz(3)
  expiresAt       DateTime?  @map("expires_at") @db.Timestamptz(3)

  // Relations
  workspace    Workspace @relation(fields: [workspaceRef], references: [ref], onDelete: Cascade)
  workspaceRef String    @map("workspace_ref")

  // Indexes and maps
  @@index([accessKeyId], type: Hash)
  @@index([workspaceRef], type: Hash)
  @@map("api_keys")
}

enum WorkspaceMemberStatus {
  PENDING
  ACTIVE

  @@map("workspace_member_status")
}

enum WorkspaceMemberRole {
  OWNER
  ADMIN
  USER

  @@map("workspace_member_role")
}

enum APIKeyRole {
  WORKSPACE_ADMIN

  @@map("api_key_role")
}
