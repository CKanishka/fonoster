/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: numbers.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./trunks";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace fonoster.numbers.v1beta2 {
    export class Number extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11]];
        constructor(data?: any[] | ({
            ref?: string;
            name?: string;
            tel_url?: string;
            city?: string;
            country?: string;
            country_iso_code?: string;
            created_at?: number;
            updated_at?: number;
            trunk?: dependency_1.fonoster.trunks.v1beta2.Trunk;
        } & (({
            agent_aor?: string;
            app_ref?: never;
        } | {
            agent_aor?: never;
            app_ref?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("tel_url" in data && data.tel_url != undefined) {
                    this.tel_url = data.tel_url;
                }
                if ("city" in data && data.city != undefined) {
                    this.city = data.city;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("country_iso_code" in data && data.country_iso_code != undefined) {
                    this.country_iso_code = data.country_iso_code;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
                if ("trunk" in data && data.trunk != undefined) {
                    this.trunk = data.trunk;
                }
                if ("agent_aor" in data && data.agent_aor != undefined) {
                    this.agent_aor = data.agent_aor;
                }
                if ("app_ref" in data && data.app_ref != undefined) {
                    this.app_ref = data.app_ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tel_url() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set tel_url(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get city() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set city(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get country_iso_code() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set country_iso_code(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set updated_at(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get trunk() {
            return pb_1.Message.getWrapperField(this, dependency_1.fonoster.trunks.v1beta2.Trunk, 9) as dependency_1.fonoster.trunks.v1beta2.Trunk;
        }
        set trunk(value: dependency_1.fonoster.trunks.v1beta2.Trunk) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_trunk() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get agent_aor() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set agent_aor(value: string) {
            pb_1.Message.setOneofField(this, 10, this.#one_of_decls[0], value);
        }
        get has_agent_aor() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get app_ref() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set app_ref(value: string) {
            pb_1.Message.setOneofField(this, 11, this.#one_of_decls[0], value);
        }
        get has_app_ref() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get ingress_handler() {
            const cases: {
                [index: number]: "none" | "agent_aor" | "app_ref";
            } = {
                0: "none",
                10: "agent_aor",
                11: "app_ref"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11])];
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            tel_url?: string;
            city?: string;
            country?: string;
            country_iso_code?: string;
            created_at?: number;
            updated_at?: number;
            trunk?: ReturnType<typeof dependency_1.fonoster.trunks.v1beta2.Trunk.prototype.toObject>;
            agent_aor?: string;
            app_ref?: string;
        }): Number {
            const message = new Number({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.tel_url != null) {
                message.tel_url = data.tel_url;
            }
            if (data.city != null) {
                message.city = data.city;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.country_iso_code != null) {
                message.country_iso_code = data.country_iso_code;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            if (data.trunk != null) {
                message.trunk = dependency_1.fonoster.trunks.v1beta2.Trunk.fromObject(data.trunk);
            }
            if (data.agent_aor != null) {
                message.agent_aor = data.agent_aor;
            }
            if (data.app_ref != null) {
                message.app_ref = data.app_ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                tel_url?: string;
                city?: string;
                country?: string;
                country_iso_code?: string;
                created_at?: number;
                updated_at?: number;
                trunk?: ReturnType<typeof dependency_1.fonoster.trunks.v1beta2.Trunk.prototype.toObject>;
                agent_aor?: string;
                app_ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.tel_url != null) {
                data.tel_url = this.tel_url;
            }
            if (this.city != null) {
                data.city = this.city;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.country_iso_code != null) {
                data.country_iso_code = this.country_iso_code;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            if (this.trunk != null) {
                data.trunk = this.trunk.toObject();
            }
            if (this.agent_aor != null) {
                data.agent_aor = this.agent_aor;
            }
            if (this.app_ref != null) {
                data.app_ref = this.app_ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.tel_url.length)
                writer.writeString(3, this.tel_url);
            if (this.city.length)
                writer.writeString(4, this.city);
            if (this.country.length)
                writer.writeString(5, this.country);
            if (this.country_iso_code.length)
                writer.writeString(6, this.country_iso_code);
            if (this.created_at != 0)
                writer.writeInt64(7, this.created_at);
            if (this.updated_at != 0)
                writer.writeInt64(8, this.updated_at);
            if (this.has_trunk)
                writer.writeMessage(9, this.trunk, () => this.trunk.serialize(writer));
            if (this.has_agent_aor)
                writer.writeString(10, this.agent_aor);
            if (this.has_app_ref)
                writer.writeString(11, this.app_ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Number {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Number();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.tel_url = reader.readString();
                        break;
                    case 4:
                        message.city = reader.readString();
                        break;
                    case 5:
                        message.country = reader.readString();
                        break;
                    case 6:
                        message.country_iso_code = reader.readString();
                        break;
                    case 7:
                        message.created_at = reader.readInt64();
                        break;
                    case 8:
                        message.updated_at = reader.readInt64();
                        break;
                    case 9:
                        reader.readMessage(message.trunk, () => message.trunk = dependency_1.fonoster.trunks.v1beta2.Trunk.deserialize(reader));
                        break;
                    case 10:
                        message.agent_aor = reader.readString();
                        break;
                    case 11:
                        message.app_ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Number {
            return Number.deserialize(bytes);
        }
    }
    export class CreateNumberRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[7, 8]];
        constructor(data?: any[] | ({
            name?: string;
            tel_url?: string;
            city?: string;
            country?: string;
            country_iso_code?: string;
            trunk_ref?: string;
        } & (({
            agent_aor?: string;
            app_ref?: never;
        } | {
            agent_aor?: never;
            app_ref?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("tel_url" in data && data.tel_url != undefined) {
                    this.tel_url = data.tel_url;
                }
                if ("city" in data && data.city != undefined) {
                    this.city = data.city;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("country_iso_code" in data && data.country_iso_code != undefined) {
                    this.country_iso_code = data.country_iso_code;
                }
                if ("trunk_ref" in data && data.trunk_ref != undefined) {
                    this.trunk_ref = data.trunk_ref;
                }
                if ("agent_aor" in data && data.agent_aor != undefined) {
                    this.agent_aor = data.agent_aor;
                }
                if ("app_ref" in data && data.app_ref != undefined) {
                    this.app_ref = data.app_ref;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tel_url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tel_url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get city() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set city(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get country_iso_code() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set country_iso_code(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get trunk_ref() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set trunk_ref(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get agent_aor() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set agent_aor(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[0], value);
        }
        get has_agent_aor() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get app_ref() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set app_ref(value: string) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[0], value);
        }
        get has_app_ref() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get ingress_handler() {
            const cases: {
                [index: number]: "none" | "agent_aor" | "app_ref";
            } = {
                0: "none",
                7: "agent_aor",
                8: "app_ref"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7, 8])];
        }
        static fromObject(data: {
            name?: string;
            tel_url?: string;
            city?: string;
            country?: string;
            country_iso_code?: string;
            trunk_ref?: string;
            agent_aor?: string;
            app_ref?: string;
        }): CreateNumberRequest {
            const message = new CreateNumberRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.tel_url != null) {
                message.tel_url = data.tel_url;
            }
            if (data.city != null) {
                message.city = data.city;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.country_iso_code != null) {
                message.country_iso_code = data.country_iso_code;
            }
            if (data.trunk_ref != null) {
                message.trunk_ref = data.trunk_ref;
            }
            if (data.agent_aor != null) {
                message.agent_aor = data.agent_aor;
            }
            if (data.app_ref != null) {
                message.app_ref = data.app_ref;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                tel_url?: string;
                city?: string;
                country?: string;
                country_iso_code?: string;
                trunk_ref?: string;
                agent_aor?: string;
                app_ref?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.tel_url != null) {
                data.tel_url = this.tel_url;
            }
            if (this.city != null) {
                data.city = this.city;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.country_iso_code != null) {
                data.country_iso_code = this.country_iso_code;
            }
            if (this.trunk_ref != null) {
                data.trunk_ref = this.trunk_ref;
            }
            if (this.agent_aor != null) {
                data.agent_aor = this.agent_aor;
            }
            if (this.app_ref != null) {
                data.app_ref = this.app_ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.tel_url.length)
                writer.writeString(2, this.tel_url);
            if (this.city.length)
                writer.writeString(3, this.city);
            if (this.country.length)
                writer.writeString(4, this.country);
            if (this.country_iso_code.length)
                writer.writeString(5, this.country_iso_code);
            if (this.trunk_ref.length)
                writer.writeString(6, this.trunk_ref);
            if (this.has_agent_aor)
                writer.writeString(7, this.agent_aor);
            if (this.has_app_ref)
                writer.writeString(8, this.app_ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateNumberRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateNumberRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.tel_url = reader.readString();
                        break;
                    case 3:
                        message.city = reader.readString();
                        break;
                    case 4:
                        message.country = reader.readString();
                        break;
                    case 5:
                        message.country_iso_code = reader.readString();
                        break;
                    case 6:
                        message.trunk_ref = reader.readString();
                        break;
                    case 7:
                        message.agent_aor = reader.readString();
                        break;
                    case 8:
                        message.app_ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateNumberRequest {
            return CreateNumberRequest.deserialize(bytes);
        }
    }
    export class CreateNumberResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): CreateNumberResponse {
            const message = new CreateNumberResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateNumberResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateNumberResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateNumberResponse {
            return CreateNumberResponse.deserialize(bytes);
        }
    }
    export class UpdateNumberRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[4, 5]];
        constructor(data?: any[] | ({
            ref?: string;
            name?: string;
            trunk_ref?: string;
        } & (({
            agent_aor?: string;
            app_ref?: never;
        } | {
            agent_aor?: never;
            app_ref?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("trunk_ref" in data && data.trunk_ref != undefined) {
                    this.trunk_ref = data.trunk_ref;
                }
                if ("agent_aor" in data && data.agent_aor != undefined) {
                    this.agent_aor = data.agent_aor;
                }
                if ("app_ref" in data && data.app_ref != undefined) {
                    this.app_ref = data.app_ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get trunk_ref() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set trunk_ref(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get agent_aor() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set agent_aor(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_agent_aor() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get app_ref() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set app_ref(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_app_ref() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get ingress_handler() {
            const cases: {
                [index: number]: "none" | "agent_aor" | "app_ref";
            } = {
                0: "none",
                4: "agent_aor",
                5: "app_ref"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4, 5])];
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            trunk_ref?: string;
            agent_aor?: string;
            app_ref?: string;
        }): UpdateNumberRequest {
            const message = new UpdateNumberRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.trunk_ref != null) {
                message.trunk_ref = data.trunk_ref;
            }
            if (data.agent_aor != null) {
                message.agent_aor = data.agent_aor;
            }
            if (data.app_ref != null) {
                message.app_ref = data.app_ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                trunk_ref?: string;
                agent_aor?: string;
                app_ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.trunk_ref != null) {
                data.trunk_ref = this.trunk_ref;
            }
            if (this.agent_aor != null) {
                data.agent_aor = this.agent_aor;
            }
            if (this.app_ref != null) {
                data.app_ref = this.app_ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.trunk_ref.length)
                writer.writeString(3, this.trunk_ref);
            if (this.has_agent_aor)
                writer.writeString(4, this.agent_aor);
            if (this.has_app_ref)
                writer.writeString(5, this.app_ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateNumberRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateNumberRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.trunk_ref = reader.readString();
                        break;
                    case 4:
                        message.agent_aor = reader.readString();
                        break;
                    case 5:
                        message.app_ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateNumberRequest {
            return UpdateNumberRequest.deserialize(bytes);
        }
    }
    export class UpdateNumberResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): UpdateNumberResponse {
            const message = new UpdateNumberResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateNumberResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateNumberResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateNumberResponse {
            return UpdateNumberResponse.deserialize(bytes);
        }
    }
    export class GetNumberRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): GetNumberRequest {
            const message = new GetNumberRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNumberRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNumberRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNumberRequest {
            return GetNumberRequest.deserialize(bytes);
        }
    }
    export class DeleteNumberRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteNumberRequest {
            const message = new DeleteNumberRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteNumberRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteNumberRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteNumberRequest {
            return DeleteNumberRequest.deserialize(bytes);
        }
    }
    export class DeleteNumberResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteNumberResponse {
            const message = new DeleteNumberResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteNumberResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteNumberResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteNumberResponse {
            return DeleteNumberResponse.deserialize(bytes);
        }
    }
    export class ListNumbersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: string;
        }): ListNumbersRequest {
            const message = new ListNumbersRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListNumbersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListNumbersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListNumbersRequest {
            return ListNumbersRequest.deserialize(bytes);
        }
    }
    export class ListNumbersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: Number[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, Number, 1) as Number[];
        }
        set items(value: Number[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof Number.prototype.toObject>[];
            next_page_token?: string;
        }): ListNumbersResponse {
            const message = new ListNumbersResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => Number.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof Number.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: Number) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: Number) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListNumbersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListNumbersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Number.deserialize(reader), Number));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListNumbersResponse {
            return ListNumbersResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedNumbersService {
        static definition = {
            CreateNumber: {
                path: "/fonoster.numbers.v1beta2.Numbers/CreateNumber",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateNumberRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateNumberRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateNumberResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateNumberResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateNumber: {
                path: "/fonoster.numbers.v1beta2.Numbers/UpdateNumber",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateNumberRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateNumberRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateNumberResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateNumberResponse.deserialize(new Uint8Array(bytes))
            },
            GetNumber: {
                path: "/fonoster.numbers.v1beta2.Numbers/GetNumber",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetNumberRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetNumberRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Number) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Number.deserialize(new Uint8Array(bytes))
            },
            DeleteNumber: {
                path: "/fonoster.numbers.v1beta2.Numbers/DeleteNumber",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteNumberRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteNumberRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteNumberResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteNumberResponse.deserialize(new Uint8Array(bytes))
            },
            ListNumbers: {
                path: "/fonoster.numbers.v1beta2.Numbers/ListNumbers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListNumbersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListNumbersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListNumbersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListNumbersResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateNumber(call: grpc_1.ServerUnaryCall<CreateNumberRequest, CreateNumberResponse>, callback: grpc_1.sendUnaryData<CreateNumberResponse>): void;
        abstract UpdateNumber(call: grpc_1.ServerUnaryCall<UpdateNumberRequest, UpdateNumberResponse>, callback: grpc_1.sendUnaryData<UpdateNumberResponse>): void;
        abstract GetNumber(call: grpc_1.ServerUnaryCall<GetNumberRequest, Number>, callback: grpc_1.sendUnaryData<Number>): void;
        abstract DeleteNumber(call: grpc_1.ServerUnaryCall<DeleteNumberRequest, DeleteNumberResponse>, callback: grpc_1.sendUnaryData<DeleteNumberResponse>): void;
        abstract ListNumbers(call: grpc_1.ServerUnaryCall<ListNumbersRequest, ListNumbersResponse>, callback: grpc_1.sendUnaryData<ListNumbersResponse>): void;
    }
    export class NumbersClient extends grpc_1.makeGenericClientConstructor(UnimplementedNumbersService.definition, "Numbers", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateNumber: GrpcUnaryServiceInterface<CreateNumberRequest, CreateNumberResponse> = (message: CreateNumberRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateNumberResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateNumberResponse>, callback?: grpc_1.requestCallback<CreateNumberResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateNumber(message, metadata, options, callback);
        };
        UpdateNumber: GrpcUnaryServiceInterface<UpdateNumberRequest, UpdateNumberResponse> = (message: UpdateNumberRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateNumberResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateNumberResponse>, callback?: grpc_1.requestCallback<UpdateNumberResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateNumber(message, metadata, options, callback);
        };
        GetNumber: GrpcUnaryServiceInterface<GetNumberRequest, Number> = (message: GetNumberRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Number>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Number>, callback?: grpc_1.requestCallback<Number>): grpc_1.ClientUnaryCall => {
            return super.GetNumber(message, metadata, options, callback);
        };
        DeleteNumber: GrpcUnaryServiceInterface<DeleteNumberRequest, DeleteNumberResponse> = (message: DeleteNumberRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteNumberResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteNumberResponse>, callback?: grpc_1.requestCallback<DeleteNumberResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteNumber(message, metadata, options, callback);
        };
        ListNumbers: GrpcUnaryServiceInterface<ListNumbersRequest, ListNumbersResponse> = (message: ListNumbersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListNumbersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListNumbersResponse>, callback?: grpc_1.requestCallback<ListNumbersResponse>): grpc_1.ClientUnaryCall => {
            return super.ListNumbers(message, metadata, options, callback);
        };
    }
}
