/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: identity.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace fonoster.identity.v1beta2 {
    export class CreateWorkspaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): CreateWorkspaceRequest {
            const message = new CreateWorkspaceRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateWorkspaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateWorkspaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateWorkspaceRequest {
            return CreateWorkspaceRequest.deserialize(bytes);
        }
    }
    export class CreateWorkspaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): CreateWorkspaceResponse {
            const message = new CreateWorkspaceResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateWorkspaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateWorkspaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateWorkspaceResponse {
            return CreateWorkspaceResponse.deserialize(bytes);
        }
    }
    export class DeleteWorkspaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteWorkspaceRequest {
            const message = new DeleteWorkspaceRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteWorkspaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteWorkspaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteWorkspaceRequest {
            return DeleteWorkspaceRequest.deserialize(bytes);
        }
    }
    export class DeleteWorkspaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteWorkspaceResponse {
            const message = new DeleteWorkspaceResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteWorkspaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteWorkspaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteWorkspaceResponse {
            return DeleteWorkspaceResponse.deserialize(bytes);
        }
    }
    export class GetWorkspaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): GetWorkspaceRequest {
            const message = new GetWorkspaceRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetWorkspaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetWorkspaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetWorkspaceRequest {
            return GetWorkspaceRequest.deserialize(bytes);
        }
    }
    export class ListWorkspacesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_token?: string;
            page_size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
            }
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page_token?: string;
            page_size?: number;
        }): ListWorkspacesRequest {
            const message = new ListWorkspacesRequest({});
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            return message;
        }
        toObject() {
            const data: {
                page_token?: string;
                page_size?: number;
            } = {};
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_token.length)
                writer.writeString(1, this.page_token);
            if (this.page_size != 0)
                writer.writeInt32(2, this.page_size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWorkspacesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWorkspacesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_token = reader.readString();
                        break;
                    case 2:
                        message.page_size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWorkspacesRequest {
            return ListWorkspacesRequest.deserialize(bytes);
        }
    }
    export class ListWorkspacesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            workspaces?: Workspace[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("workspaces" in data && data.workspaces != undefined) {
                    this.workspaces = data.workspaces;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get workspaces() {
            return pb_1.Message.getRepeatedWrapperField(this, Workspace, 1) as Workspace[];
        }
        set workspaces(value: Workspace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            workspaces?: ReturnType<typeof Workspace.prototype.toObject>[];
            next_page_token?: string;
        }): ListWorkspacesResponse {
            const message = new ListWorkspacesResponse({});
            if (data.workspaces != null) {
                message.workspaces = data.workspaces.map(item => Workspace.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                workspaces?: ReturnType<typeof Workspace.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.workspaces != null) {
                data.workspaces = this.workspaces.map((item: Workspace) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.workspaces.length)
                writer.writeRepeatedMessage(1, this.workspaces, (item: Workspace) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListWorkspacesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListWorkspacesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.workspaces, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Workspace.deserialize(reader), Workspace));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListWorkspacesResponse {
            return ListWorkspacesResponse.deserialize(bytes);
        }
    }
    export class UpdateWorkspaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
        }): UpdateWorkspaceRequest {
            const message = new UpdateWorkspaceRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateWorkspaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateWorkspaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateWorkspaceRequest {
            return UpdateWorkspaceRequest.deserialize(bytes);
        }
    }
    export class UpdateWorkspaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): UpdateWorkspaceResponse {
            const message = new UpdateWorkspaceResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateWorkspaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateWorkspaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateWorkspaceResponse {
            return UpdateWorkspaceResponse.deserialize(bytes);
        }
    }
    export class InviteUserToWorkspaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            role?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            email?: string;
            role?: string;
            name?: string;
        }): InviteUserToWorkspaceRequest {
            const message = new InviteUserToWorkspaceRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                role?: string;
                name?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.role.length)
                writer.writeString(2, this.role);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InviteUserToWorkspaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InviteUserToWorkspaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.role = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InviteUserToWorkspaceRequest {
            return InviteUserToWorkspaceRequest.deserialize(bytes);
        }
    }
    export class InviteUserToWorkspaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_ref" in data && data.user_ref != undefined) {
                    this.user_ref = data.user_ref;
                }
            }
        }
        get user_ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_ref?: string;
        }): InviteUserToWorkspaceResponse {
            const message = new InviteUserToWorkspaceResponse({});
            if (data.user_ref != null) {
                message.user_ref = data.user_ref;
            }
            return message;
        }
        toObject() {
            const data: {
                user_ref?: string;
            } = {};
            if (this.user_ref != null) {
                data.user_ref = this.user_ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_ref.length)
                writer.writeString(1, this.user_ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InviteUserToWorkspaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InviteUserToWorkspaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InviteUserToWorkspaceResponse {
            return InviteUserToWorkspaceResponse.deserialize(bytes);
        }
    }
    export class RemoveUserFromWorkspaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_ref" in data && data.user_ref != undefined) {
                    this.user_ref = data.user_ref;
                }
            }
        }
        get user_ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_ref?: string;
        }): RemoveUserFromWorkspaceRequest {
            const message = new RemoveUserFromWorkspaceRequest({});
            if (data.user_ref != null) {
                message.user_ref = data.user_ref;
            }
            return message;
        }
        toObject() {
            const data: {
                user_ref?: string;
            } = {};
            if (this.user_ref != null) {
                data.user_ref = this.user_ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_ref.length)
                writer.writeString(1, this.user_ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveUserFromWorkspaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveUserFromWorkspaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveUserFromWorkspaceRequest {
            return RemoveUserFromWorkspaceRequest.deserialize(bytes);
        }
    }
    export class RemoveUserFromWorkspaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_ref" in data && data.user_ref != undefined) {
                    this.user_ref = data.user_ref;
                }
            }
        }
        get user_ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_ref?: string;
        }): RemoveUserFromWorkspaceResponse {
            const message = new RemoveUserFromWorkspaceResponse({});
            if (data.user_ref != null) {
                message.user_ref = data.user_ref;
            }
            return message;
        }
        toObject() {
            const data: {
                user_ref?: string;
            } = {};
            if (this.user_ref != null) {
                data.user_ref = this.user_ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_ref.length)
                writer.writeString(1, this.user_ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveUserFromWorkspaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveUserFromWorkspaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveUserFromWorkspaceResponse {
            return RemoveUserFromWorkspaceResponse.deserialize(bytes);
        }
    }
    export class ResendWorkspaceMembershipInvitationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_ref" in data && data.user_ref != undefined) {
                    this.user_ref = data.user_ref;
                }
            }
        }
        get user_ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_ref?: string;
        }): ResendWorkspaceMembershipInvitationRequest {
            const message = new ResendWorkspaceMembershipInvitationRequest({});
            if (data.user_ref != null) {
                message.user_ref = data.user_ref;
            }
            return message;
        }
        toObject() {
            const data: {
                user_ref?: string;
            } = {};
            if (this.user_ref != null) {
                data.user_ref = this.user_ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_ref.length)
                writer.writeString(1, this.user_ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResendWorkspaceMembershipInvitationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResendWorkspaceMembershipInvitationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResendWorkspaceMembershipInvitationRequest {
            return ResendWorkspaceMembershipInvitationRequest.deserialize(bytes);
        }
    }
    export class ResendWorkspaceMembershipInvitationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_ref" in data && data.user_ref != undefined) {
                    this.user_ref = data.user_ref;
                }
            }
        }
        get user_ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_ref?: string;
        }): ResendWorkspaceMembershipInvitationResponse {
            const message = new ResendWorkspaceMembershipInvitationResponse({});
            if (data.user_ref != null) {
                message.user_ref = data.user_ref;
            }
            return message;
        }
        toObject() {
            const data: {
                user_ref?: string;
            } = {};
            if (this.user_ref != null) {
                data.user_ref = this.user_ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_ref.length)
                writer.writeString(1, this.user_ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResendWorkspaceMembershipInvitationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResendWorkspaceMembershipInvitationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResendWorkspaceMembershipInvitationResponse {
            return ResendWorkspaceMembershipInvitationResponse.deserialize(bytes);
        }
    }
    export class CreateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
            name?: string;
            avatar?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
            name?: string;
            avatar?: string;
        }): CreateUserRequest {
            const message = new CreateUserRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
                name?: string;
                avatar?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.avatar.length)
                writer.writeString(4, this.avatar);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.avatar = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateUserRequest {
            return CreateUserRequest.deserialize(bytes);
        }
    }
    export class CreateUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): CreateUserResponse {
            const message = new CreateUserResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateUserResponse {
            return CreateUserResponse.deserialize(bytes);
        }
    }
    export class GetUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): GetUserRequest {
            const message = new GetUserRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserRequest {
            return GetUserRequest.deserialize(bytes);
        }
    }
    export class GetUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            email?: string;
            name?: string;
            avatar?: string;
            created_at?: number;
            updated_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set updated_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            ref?: string;
            email?: string;
            name?: string;
            avatar?: string;
            created_at?: number;
            updated_at?: number;
        }): GetUserResponse {
            const message = new GetUserResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                email?: string;
                name?: string;
                avatar?: string;
                created_at?: number;
                updated_at?: number;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.avatar.length)
                writer.writeString(4, this.avatar);
            if (this.created_at != 0)
                writer.writeInt64(5, this.created_at);
            if (this.updated_at != 0)
                writer.writeInt64(6, this.updated_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.avatar = reader.readString();
                        break;
                    case 5:
                        message.created_at = reader.readInt64();
                        break;
                    case 6:
                        message.updated_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserResponse {
            return GetUserResponse.deserialize(bytes);
        }
    }
    export class UpdateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            password?: string;
            name?: string;
            avatar?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatar() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set avatar(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            ref?: string;
            password?: string;
            name?: string;
            avatar?: string;
        }): UpdateUserRequest {
            const message = new UpdateUserRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.avatar != null) {
                message.avatar = data.avatar;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                password?: string;
                name?: string;
                avatar?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.avatar.length)
                writer.writeString(4, this.avatar);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.avatar = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserRequest {
            return UpdateUserRequest.deserialize(bytes);
        }
    }
    export class UpdateUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): UpdateUserResponse {
            const message = new UpdateUserResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserResponse {
            return UpdateUserResponse.deserialize(bytes);
        }
    }
    export class DeleteUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteUserRequest {
            const message = new DeleteUserRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserRequest {
            return DeleteUserRequest.deserialize(bytes);
        }
    }
    export class DeleteUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteUserResponse {
            const message = new DeleteUserResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserResponse {
            return DeleteUserResponse.deserialize(bytes);
        }
    }
    export class Workspace extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            name?: string;
            owner_ref?: string;
            created_at?: number;
            updated_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("owner_ref" in data && data.owner_ref != undefined) {
                    this.owner_ref = data.owner_ref;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get owner_ref() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set owner_ref(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set updated_at(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            owner_ref?: string;
            created_at?: number;
            updated_at?: number;
        }): Workspace {
            const message = new Workspace({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.owner_ref != null) {
                message.owner_ref = data.owner_ref;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                owner_ref?: string;
                created_at?: number;
                updated_at?: number;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.owner_ref != null) {
                data.owner_ref = this.owner_ref;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.owner_ref.length)
                writer.writeString(3, this.owner_ref);
            if (this.created_at != 0)
                writer.writeInt64(4, this.created_at);
            if (this.updated_at != 0)
                writer.writeInt64(5, this.updated_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Workspace {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Workspace();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.owner_ref = reader.readString();
                        break;
                    case 4:
                        message.created_at = reader.readInt64();
                        break;
                    case 5:
                        message.updated_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Workspace {
            return Workspace.deserialize(bytes);
        }
    }
    export class CreateApiKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            role?: string;
            expires_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("expires_at" in data && data.expires_at != undefined) {
                    this.expires_at = data.expires_at;
                }
            }
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get expires_at() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set expires_at(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            role?: string;
            expires_at?: number;
        }): CreateApiKeyRequest {
            const message = new CreateApiKeyRequest({});
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.expires_at != null) {
                message.expires_at = data.expires_at;
            }
            return message;
        }
        toObject() {
            const data: {
                role?: string;
                expires_at?: number;
            } = {};
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.expires_at != null) {
                data.expires_at = this.expires_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.role.length)
                writer.writeString(1, this.role);
            if (this.expires_at != 0)
                writer.writeInt32(2, this.expires_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateApiKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateApiKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.role = reader.readString();
                        break;
                    case 2:
                        message.expires_at = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateApiKeyRequest {
            return CreateApiKeyRequest.deserialize(bytes);
        }
    }
    export class CreateApiKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            access_key_id?: string;
            access_key_secret?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("access_key_id" in data && data.access_key_id != undefined) {
                    this.access_key_id = data.access_key_id;
                }
                if ("access_key_secret" in data && data.access_key_secret != undefined) {
                    this.access_key_secret = data.access_key_secret;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get access_key_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set access_key_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get access_key_secret() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set access_key_secret(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            ref?: string;
            access_key_id?: string;
            access_key_secret?: string;
        }): CreateApiKeyResponse {
            const message = new CreateApiKeyResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.access_key_id != null) {
                message.access_key_id = data.access_key_id;
            }
            if (data.access_key_secret != null) {
                message.access_key_secret = data.access_key_secret;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                access_key_id?: string;
                access_key_secret?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.access_key_id != null) {
                data.access_key_id = this.access_key_id;
            }
            if (this.access_key_secret != null) {
                data.access_key_secret = this.access_key_secret;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.access_key_id.length)
                writer.writeString(2, this.access_key_id);
            if (this.access_key_secret.length)
                writer.writeString(3, this.access_key_secret);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateApiKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateApiKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.access_key_id = reader.readString();
                        break;
                    case 3:
                        message.access_key_secret = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateApiKeyResponse {
            return CreateApiKeyResponse.deserialize(bytes);
        }
    }
    export class DeleteApiKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteApiKeyRequest {
            const message = new DeleteApiKeyRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteApiKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteApiKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteApiKeyRequest {
            return DeleteApiKeyRequest.deserialize(bytes);
        }
    }
    export class DeleteApiKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteApiKeyResponse {
            const message = new DeleteApiKeyResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteApiKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteApiKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteApiKeyResponse {
            return DeleteApiKeyResponse.deserialize(bytes);
        }
    }
    export class ListApiKeysRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: string;
        }): ListApiKeysRequest {
            const message = new ListApiKeysRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(3, this.page_size);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListApiKeysRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListApiKeysRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListApiKeysRequest {
            return ListApiKeysRequest.deserialize(bytes);
        }
    }
    export class ListApiKeysResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: ApiKey[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, ApiKey, 1) as ApiKey[];
        }
        set items(value: ApiKey[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof ApiKey.prototype.toObject>[];
            next_page_token?: string;
        }): ListApiKeysResponse {
            const message = new ListApiKeysResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => ApiKey.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof ApiKey.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: ApiKey) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: ApiKey) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListApiKeysResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListApiKeysResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ApiKey.deserialize(reader), ApiKey));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListApiKeysResponse {
            return ListApiKeysResponse.deserialize(bytes);
        }
    }
    export class RegenerateApiKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): RegenerateApiKeyRequest {
            const message = new RegenerateApiKeyRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegenerateApiKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegenerateApiKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegenerateApiKeyRequest {
            return RegenerateApiKeyRequest.deserialize(bytes);
        }
    }
    export class RegenerateApiKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            access_key_id?: string;
            access_key_secret?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("access_key_id" in data && data.access_key_id != undefined) {
                    this.access_key_id = data.access_key_id;
                }
                if ("access_key_secret" in data && data.access_key_secret != undefined) {
                    this.access_key_secret = data.access_key_secret;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get access_key_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set access_key_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get access_key_secret() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set access_key_secret(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            ref?: string;
            access_key_id?: string;
            access_key_secret?: string;
        }): RegenerateApiKeyResponse {
            const message = new RegenerateApiKeyResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.access_key_id != null) {
                message.access_key_id = data.access_key_id;
            }
            if (data.access_key_secret != null) {
                message.access_key_secret = data.access_key_secret;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                access_key_id?: string;
                access_key_secret?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.access_key_id != null) {
                data.access_key_id = this.access_key_id;
            }
            if (this.access_key_secret != null) {
                data.access_key_secret = this.access_key_secret;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.access_key_id.length)
                writer.writeString(2, this.access_key_id);
            if (this.access_key_secret.length)
                writer.writeString(3, this.access_key_secret);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegenerateApiKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegenerateApiKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.access_key_id = reader.readString();
                        break;
                    case 3:
                        message.access_key_secret = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegenerateApiKeyResponse {
            return RegenerateApiKeyResponse.deserialize(bytes);
        }
    }
    export class ApiKey extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            access_key_id?: string;
            role?: string;
            expires_at?: number;
            created_at?: number;
            updated_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("access_key_id" in data && data.access_key_id != undefined) {
                    this.access_key_id = data.access_key_id;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("expires_at" in data && data.expires_at != undefined) {
                    this.expires_at = data.expires_at;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get access_key_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set access_key_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get expires_at() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set expires_at(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set updated_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            ref?: string;
            access_key_id?: string;
            role?: string;
            expires_at?: number;
            created_at?: number;
            updated_at?: number;
        }): ApiKey {
            const message = new ApiKey({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.access_key_id != null) {
                message.access_key_id = data.access_key_id;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.expires_at != null) {
                message.expires_at = data.expires_at;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                access_key_id?: string;
                role?: string;
                expires_at?: number;
                created_at?: number;
                updated_at?: number;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.access_key_id != null) {
                data.access_key_id = this.access_key_id;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.expires_at != null) {
                data.expires_at = this.expires_at;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.access_key_id.length)
                writer.writeString(2, this.access_key_id);
            if (this.role.length)
                writer.writeString(3, this.role);
            if (this.expires_at != 0)
                writer.writeInt32(4, this.expires_at);
            if (this.created_at != 0)
                writer.writeInt64(5, this.created_at);
            if (this.updated_at != 0)
                writer.writeInt64(6, this.updated_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApiKey {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApiKey();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.access_key_id = reader.readString();
                        break;
                    case 3:
                        message.role = reader.readString();
                        break;
                    case 4:
                        message.expires_at = reader.readInt32();
                        break;
                    case 5:
                        message.created_at = reader.readInt64();
                        break;
                    case 6:
                        message.updated_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApiKey {
            return ApiKey.deserialize(bytes);
        }
    }
    export class ExchangeCredentialsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
            ephemeral_code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("ephemeral_code" in data && data.ephemeral_code != undefined) {
                    this.ephemeral_code = data.ephemeral_code;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ephemeral_code() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ephemeral_code(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
            ephemeral_code?: string;
        }): ExchangeCredentialsRequest {
            const message = new ExchangeCredentialsRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.ephemeral_code != null) {
                message.ephemeral_code = data.ephemeral_code;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
                ephemeral_code?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.ephemeral_code != null) {
                data.ephemeral_code = this.ephemeral_code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.ephemeral_code.length)
                writer.writeString(3, this.ephemeral_code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeCredentialsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeCredentialsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.ephemeral_code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeCredentialsRequest {
            return ExchangeCredentialsRequest.deserialize(bytes);
        }
    }
    export class ExchangeCredentialsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id_token?: string;
            access_token?: string;
            refresh_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id_token" in data && data.id_token != undefined) {
                    this.id_token = data.id_token;
                }
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
            }
        }
        get id_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id_token?: string;
            access_token?: string;
            refresh_token?: string;
        }): ExchangeCredentialsResponse {
            const message = new ExchangeCredentialsResponse({});
            if (data.id_token != null) {
                message.id_token = data.id_token;
            }
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            return message;
        }
        toObject() {
            const data: {
                id_token?: string;
                access_token?: string;
                refresh_token?: string;
            } = {};
            if (this.id_token != null) {
                data.id_token = this.id_token;
            }
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id_token.length)
                writer.writeString(1, this.id_token);
            if (this.access_token.length)
                writer.writeString(2, this.access_token);
            if (this.refresh_token.length)
                writer.writeString(3, this.refresh_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeCredentialsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeCredentialsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id_token = reader.readString();
                        break;
                    case 2:
                        message.access_token = reader.readString();
                        break;
                    case 3:
                        message.refresh_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeCredentialsResponse {
            return ExchangeCredentialsResponse.deserialize(bytes);
        }
    }
    export class ExchangeApiKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            access_key_id?: string;
            access_key_secret?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("access_key_id" in data && data.access_key_id != undefined) {
                    this.access_key_id = data.access_key_id;
                }
                if ("access_key_secret" in data && data.access_key_secret != undefined) {
                    this.access_key_secret = data.access_key_secret;
                }
            }
        }
        get access_key_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set access_key_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get access_key_secret() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set access_key_secret(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            access_key_id?: string;
            access_key_secret?: string;
        }): ExchangeApiKeyRequest {
            const message = new ExchangeApiKeyRequest({});
            if (data.access_key_id != null) {
                message.access_key_id = data.access_key_id;
            }
            if (data.access_key_secret != null) {
                message.access_key_secret = data.access_key_secret;
            }
            return message;
        }
        toObject() {
            const data: {
                access_key_id?: string;
                access_key_secret?: string;
            } = {};
            if (this.access_key_id != null) {
                data.access_key_id = this.access_key_id;
            }
            if (this.access_key_secret != null) {
                data.access_key_secret = this.access_key_secret;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.access_key_id.length)
                writer.writeString(1, this.access_key_id);
            if (this.access_key_secret.length)
                writer.writeString(2, this.access_key_secret);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeApiKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeApiKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.access_key_id = reader.readString();
                        break;
                    case 2:
                        message.access_key_secret = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeApiKeyRequest {
            return ExchangeApiKeyRequest.deserialize(bytes);
        }
    }
    export class ExchangeApiKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id_token?: string;
            access_token?: string;
            refresh_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id_token" in data && data.id_token != undefined) {
                    this.id_token = data.id_token;
                }
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
            }
        }
        get id_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id_token?: string;
            access_token?: string;
            refresh_token?: string;
        }): ExchangeApiKeyResponse {
            const message = new ExchangeApiKeyResponse({});
            if (data.id_token != null) {
                message.id_token = data.id_token;
            }
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            return message;
        }
        toObject() {
            const data: {
                id_token?: string;
                access_token?: string;
                refresh_token?: string;
            } = {};
            if (this.id_token != null) {
                data.id_token = this.id_token;
            }
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id_token.length)
                writer.writeString(1, this.id_token);
            if (this.access_token.length)
                writer.writeString(2, this.access_token);
            if (this.refresh_token.length)
                writer.writeString(3, this.refresh_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeApiKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeApiKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id_token = reader.readString();
                        break;
                    case 2:
                        message.access_token = reader.readString();
                        break;
                    case 3:
                        message.refresh_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeApiKeyResponse {
            return ExchangeApiKeyResponse.deserialize(bytes);
        }
    }
    export class ExchangeOAuth2CodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            code?: string;
        }): ExchangeOAuth2CodeRequest {
            const message = new ExchangeOAuth2CodeRequest({});
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code.length)
                writer.writeString(1, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeOAuth2CodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeOAuth2CodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeOAuth2CodeRequest {
            return ExchangeOAuth2CodeRequest.deserialize(bytes);
        }
    }
    export class ExchangeOAuth2CodeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id_token?: string;
            access_token?: string;
            refresh_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id_token" in data && data.id_token != undefined) {
                    this.id_token = data.id_token;
                }
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
            }
        }
        get id_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id_token?: string;
            access_token?: string;
            refresh_token?: string;
        }): ExchangeOAuth2CodeResponse {
            const message = new ExchangeOAuth2CodeResponse({});
            if (data.id_token != null) {
                message.id_token = data.id_token;
            }
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            return message;
        }
        toObject() {
            const data: {
                id_token?: string;
                access_token?: string;
                refresh_token?: string;
            } = {};
            if (this.id_token != null) {
                data.id_token = this.id_token;
            }
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id_token.length)
                writer.writeString(1, this.id_token);
            if (this.access_token.length)
                writer.writeString(2, this.access_token);
            if (this.refresh_token.length)
                writer.writeString(3, this.refresh_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeOAuth2CodeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeOAuth2CodeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id_token = reader.readString();
                        break;
                    case 2:
                        message.access_token = reader.readString();
                        break;
                    case 3:
                        message.refresh_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeOAuth2CodeResponse {
            return ExchangeOAuth2CodeResponse.deserialize(bytes);
        }
    }
    export class ExchangeRefreshTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            refresh_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
            }
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            refresh_token?: string;
        }): ExchangeRefreshTokenRequest {
            const message = new ExchangeRefreshTokenRequest({});
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            return message;
        }
        toObject() {
            const data: {
                refresh_token?: string;
            } = {};
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.refresh_token.length)
                writer.writeString(1, this.refresh_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeRefreshTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeRefreshTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.refresh_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeRefreshTokenRequest {
            return ExchangeRefreshTokenRequest.deserialize(bytes);
        }
    }
    export class ExchangeRefreshTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id_token?: string;
            access_token?: string;
            refresh_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id_token" in data && data.id_token != undefined) {
                    this.id_token = data.id_token;
                }
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
            }
        }
        get id_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id_token?: string;
            access_token?: string;
            refresh_token?: string;
        }): ExchangeRefreshTokenResponse {
            const message = new ExchangeRefreshTokenResponse({});
            if (data.id_token != null) {
                message.id_token = data.id_token;
            }
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            return message;
        }
        toObject() {
            const data: {
                id_token?: string;
                access_token?: string;
                refresh_token?: string;
            } = {};
            if (this.id_token != null) {
                data.id_token = this.id_token;
            }
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id_token.length)
                writer.writeString(1, this.id_token);
            if (this.access_token.length)
                writer.writeString(2, this.access_token);
            if (this.refresh_token.length)
                writer.writeString(3, this.refresh_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeRefreshTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExchangeRefreshTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id_token = reader.readString();
                        break;
                    case 2:
                        message.access_token = reader.readString();
                        break;
                    case 3:
                        message.refresh_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExchangeRefreshTokenResponse {
            return ExchangeRefreshTokenResponse.deserialize(bytes);
        }
    }
    export class RevokeTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): RevokeTokenRequest {
            const message = new RevokeTokenRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RevokeTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevokeTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RevokeTokenRequest {
            return RevokeTokenRequest.deserialize(bytes);
        }
    }
    export class RevokeTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): RevokeTokenResponse {
            const message = new RevokeTokenResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RevokeTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RevokeTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RevokeTokenResponse {
            return RevokeTokenResponse.deserialize(bytes);
        }
    }
    export class GetPublicKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            public_key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("public_key" in data && data.public_key != undefined) {
                    this.public_key = data.public_key;
                }
            }
        }
        get public_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set public_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            public_key?: string;
        }): GetPublicKeyResponse {
            const message = new GetPublicKeyResponse({});
            if (data.public_key != null) {
                message.public_key = data.public_key;
            }
            return message;
        }
        toObject() {
            const data: {
                public_key?: string;
            } = {};
            if (this.public_key != null) {
                data.public_key = this.public_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.public_key.length)
                writer.writeString(1, this.public_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPublicKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPublicKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.public_key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPublicKeyResponse {
            return GetPublicKeyResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedIdentityService {
        static definition = {
            CreateWorkspace: {
                path: "/fonoster.identity.v1beta2.Identity/CreateWorkspace",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateWorkspaceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateWorkspaceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateWorkspaceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateWorkspaceResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteWorkspace: {
                path: "/fonoster.identity.v1beta2.Identity/DeleteWorkspace",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteWorkspaceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteWorkspaceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteWorkspaceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteWorkspaceResponse.deserialize(new Uint8Array(bytes))
            },
            GetWorkspace: {
                path: "/fonoster.identity.v1beta2.Identity/GetWorkspace",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetWorkspaceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetWorkspaceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Workspace) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Workspace.deserialize(new Uint8Array(bytes))
            },
            ListWorkspaces: {
                path: "/fonoster.identity.v1beta2.Identity/ListWorkspaces",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListWorkspacesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListWorkspacesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListWorkspacesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListWorkspacesResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateWorkspace: {
                path: "/fonoster.identity.v1beta2.Identity/UpdateWorkspace",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateWorkspaceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateWorkspaceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateWorkspaceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateWorkspaceResponse.deserialize(new Uint8Array(bytes))
            },
            InviteUserToWorkspace: {
                path: "/fonoster.identity.v1beta2.Identity/InviteUserToWorkspace",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InviteUserToWorkspaceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InviteUserToWorkspaceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: InviteUserToWorkspaceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => InviteUserToWorkspaceResponse.deserialize(new Uint8Array(bytes))
            },
            RemoveUserFromWorkspace: {
                path: "/fonoster.identity.v1beta2.Identity/RemoveUserFromWorkspace",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RemoveUserFromWorkspaceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RemoveUserFromWorkspaceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RemoveUserFromWorkspaceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RemoveUserFromWorkspaceResponse.deserialize(new Uint8Array(bytes))
            },
            ResendWorkspaceMembershipInvitation: {
                path: "/fonoster.identity.v1beta2.Identity/ResendWorkspaceMembershipInvitation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ResendWorkspaceMembershipInvitationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ResendWorkspaceMembershipInvitationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResendWorkspaceMembershipInvitationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResendWorkspaceMembershipInvitationResponse.deserialize(new Uint8Array(bytes))
            },
            CreateUser: {
                path: "/fonoster.identity.v1beta2.Identity/CreateUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateUserResponse.deserialize(new Uint8Array(bytes))
            },
            GetUser: {
                path: "/fonoster.identity.v1beta2.Identity/GetUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUserResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateUser: {
                path: "/fonoster.identity.v1beta2.Identity/UpdateUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateUserResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteUser: {
                path: "/fonoster.identity.v1beta2.Identity/DeleteUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteUserResponse.deserialize(new Uint8Array(bytes))
            },
            CreateApiKey: {
                path: "/fonoster.identity.v1beta2.Identity/CreateApiKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateApiKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateApiKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateApiKeyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateApiKeyResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteApiKey: {
                path: "/fonoster.identity.v1beta2.Identity/DeleteApiKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteApiKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteApiKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteApiKeyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteApiKeyResponse.deserialize(new Uint8Array(bytes))
            },
            ListApiKeys: {
                path: "/fonoster.identity.v1beta2.Identity/ListApiKeys",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListApiKeysRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListApiKeysRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListApiKeysResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListApiKeysResponse.deserialize(new Uint8Array(bytes))
            },
            RegenerateApiKey: {
                path: "/fonoster.identity.v1beta2.Identity/RegenerateApiKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegenerateApiKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegenerateApiKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegenerateApiKeyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegenerateApiKeyResponse.deserialize(new Uint8Array(bytes))
            },
            ExchangeCredentials: {
                path: "/fonoster.identity.v1beta2.Identity/ExchangeCredentials",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ExchangeCredentialsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExchangeCredentialsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExchangeCredentialsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExchangeCredentialsResponse.deserialize(new Uint8Array(bytes))
            },
            ExchangeApiKey: {
                path: "/fonoster.identity.v1beta2.Identity/ExchangeApiKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ExchangeApiKeyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExchangeApiKeyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExchangeApiKeyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExchangeApiKeyResponse.deserialize(new Uint8Array(bytes))
            },
            ExchangeOAuth2Code: {
                path: "/fonoster.identity.v1beta2.Identity/ExchangeOAuth2Code",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ExchangeOAuth2CodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExchangeOAuth2CodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExchangeOAuth2CodeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExchangeOAuth2CodeResponse.deserialize(new Uint8Array(bytes))
            },
            ExchangeRefreshToken: {
                path: "/fonoster.identity.v1beta2.Identity/ExchangeRefreshToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ExchangeRefreshTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExchangeRefreshTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ExchangeRefreshTokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ExchangeRefreshTokenResponse.deserialize(new Uint8Array(bytes))
            },
            RevokeToken: {
                path: "/fonoster.identity.v1beta2.Identity/RevokeToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RevokeTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RevokeTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RevokeTokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RevokeTokenResponse.deserialize(new Uint8Array(bytes))
            },
            GetPublicKey: {
                path: "/fonoster.identity.v1beta2.Identity/GetPublicKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetPublicKeyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetPublicKeyResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateWorkspace(call: grpc_1.ServerUnaryCall<CreateWorkspaceRequest, CreateWorkspaceResponse>, callback: grpc_1.sendUnaryData<CreateWorkspaceResponse>): void;
        abstract DeleteWorkspace(call: grpc_1.ServerUnaryCall<DeleteWorkspaceRequest, DeleteWorkspaceResponse>, callback: grpc_1.sendUnaryData<DeleteWorkspaceResponse>): void;
        abstract GetWorkspace(call: grpc_1.ServerUnaryCall<GetWorkspaceRequest, Workspace>, callback: grpc_1.sendUnaryData<Workspace>): void;
        abstract ListWorkspaces(call: grpc_1.ServerUnaryCall<ListWorkspacesRequest, ListWorkspacesResponse>, callback: grpc_1.sendUnaryData<ListWorkspacesResponse>): void;
        abstract UpdateWorkspace(call: grpc_1.ServerUnaryCall<UpdateWorkspaceRequest, UpdateWorkspaceResponse>, callback: grpc_1.sendUnaryData<UpdateWorkspaceResponse>): void;
        abstract InviteUserToWorkspace(call: grpc_1.ServerUnaryCall<InviteUserToWorkspaceRequest, InviteUserToWorkspaceResponse>, callback: grpc_1.sendUnaryData<InviteUserToWorkspaceResponse>): void;
        abstract RemoveUserFromWorkspace(call: grpc_1.ServerUnaryCall<RemoveUserFromWorkspaceRequest, RemoveUserFromWorkspaceResponse>, callback: grpc_1.sendUnaryData<RemoveUserFromWorkspaceResponse>): void;
        abstract ResendWorkspaceMembershipInvitation(call: grpc_1.ServerUnaryCall<ResendWorkspaceMembershipInvitationRequest, ResendWorkspaceMembershipInvitationResponse>, callback: grpc_1.sendUnaryData<ResendWorkspaceMembershipInvitationResponse>): void;
        abstract CreateUser(call: grpc_1.ServerUnaryCall<CreateUserRequest, CreateUserResponse>, callback: grpc_1.sendUnaryData<CreateUserResponse>): void;
        abstract GetUser(call: grpc_1.ServerUnaryCall<GetUserRequest, GetUserResponse>, callback: grpc_1.sendUnaryData<GetUserResponse>): void;
        abstract UpdateUser(call: grpc_1.ServerUnaryCall<UpdateUserRequest, UpdateUserResponse>, callback: grpc_1.sendUnaryData<UpdateUserResponse>): void;
        abstract DeleteUser(call: grpc_1.ServerUnaryCall<DeleteUserRequest, DeleteUserResponse>, callback: grpc_1.sendUnaryData<DeleteUserResponse>): void;
        abstract CreateApiKey(call: grpc_1.ServerUnaryCall<CreateApiKeyRequest, CreateApiKeyResponse>, callback: grpc_1.sendUnaryData<CreateApiKeyResponse>): void;
        abstract DeleteApiKey(call: grpc_1.ServerUnaryCall<DeleteApiKeyRequest, DeleteApiKeyResponse>, callback: grpc_1.sendUnaryData<DeleteApiKeyResponse>): void;
        abstract ListApiKeys(call: grpc_1.ServerUnaryCall<ListApiKeysRequest, ListApiKeysResponse>, callback: grpc_1.sendUnaryData<ListApiKeysResponse>): void;
        abstract RegenerateApiKey(call: grpc_1.ServerUnaryCall<RegenerateApiKeyRequest, RegenerateApiKeyResponse>, callback: grpc_1.sendUnaryData<RegenerateApiKeyResponse>): void;
        abstract ExchangeCredentials(call: grpc_1.ServerUnaryCall<ExchangeCredentialsRequest, ExchangeCredentialsResponse>, callback: grpc_1.sendUnaryData<ExchangeCredentialsResponse>): void;
        abstract ExchangeApiKey(call: grpc_1.ServerUnaryCall<ExchangeApiKeyRequest, ExchangeApiKeyResponse>, callback: grpc_1.sendUnaryData<ExchangeApiKeyResponse>): void;
        abstract ExchangeOAuth2Code(call: grpc_1.ServerUnaryCall<ExchangeOAuth2CodeRequest, ExchangeOAuth2CodeResponse>, callback: grpc_1.sendUnaryData<ExchangeOAuth2CodeResponse>): void;
        abstract ExchangeRefreshToken(call: grpc_1.ServerUnaryCall<ExchangeRefreshTokenRequest, ExchangeRefreshTokenResponse>, callback: grpc_1.sendUnaryData<ExchangeRefreshTokenResponse>): void;
        abstract RevokeToken(call: grpc_1.ServerUnaryCall<RevokeTokenRequest, RevokeTokenResponse>, callback: grpc_1.sendUnaryData<RevokeTokenResponse>): void;
        abstract GetPublicKey(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetPublicKeyResponse>, callback: grpc_1.sendUnaryData<GetPublicKeyResponse>): void;
    }
    export class IdentityClient extends grpc_1.makeGenericClientConstructor(UnimplementedIdentityService.definition, "Identity", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateWorkspace: GrpcUnaryServiceInterface<CreateWorkspaceRequest, CreateWorkspaceResponse> = (message: CreateWorkspaceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateWorkspaceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateWorkspaceResponse>, callback?: grpc_1.requestCallback<CreateWorkspaceResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateWorkspace(message, metadata, options, callback);
        };
        DeleteWorkspace: GrpcUnaryServiceInterface<DeleteWorkspaceRequest, DeleteWorkspaceResponse> = (message: DeleteWorkspaceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteWorkspaceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteWorkspaceResponse>, callback?: grpc_1.requestCallback<DeleteWorkspaceResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteWorkspace(message, metadata, options, callback);
        };
        GetWorkspace: GrpcUnaryServiceInterface<GetWorkspaceRequest, Workspace> = (message: GetWorkspaceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Workspace>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Workspace>, callback?: grpc_1.requestCallback<Workspace>): grpc_1.ClientUnaryCall => {
            return super.GetWorkspace(message, metadata, options, callback);
        };
        ListWorkspaces: GrpcUnaryServiceInterface<ListWorkspacesRequest, ListWorkspacesResponse> = (message: ListWorkspacesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListWorkspacesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListWorkspacesResponse>, callback?: grpc_1.requestCallback<ListWorkspacesResponse>): grpc_1.ClientUnaryCall => {
            return super.ListWorkspaces(message, metadata, options, callback);
        };
        UpdateWorkspace: GrpcUnaryServiceInterface<UpdateWorkspaceRequest, UpdateWorkspaceResponse> = (message: UpdateWorkspaceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateWorkspaceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateWorkspaceResponse>, callback?: grpc_1.requestCallback<UpdateWorkspaceResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateWorkspace(message, metadata, options, callback);
        };
        InviteUserToWorkspace: GrpcUnaryServiceInterface<InviteUserToWorkspaceRequest, InviteUserToWorkspaceResponse> = (message: InviteUserToWorkspaceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<InviteUserToWorkspaceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<InviteUserToWorkspaceResponse>, callback?: grpc_1.requestCallback<InviteUserToWorkspaceResponse>): grpc_1.ClientUnaryCall => {
            return super.InviteUserToWorkspace(message, metadata, options, callback);
        };
        RemoveUserFromWorkspace: GrpcUnaryServiceInterface<RemoveUserFromWorkspaceRequest, RemoveUserFromWorkspaceResponse> = (message: RemoveUserFromWorkspaceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RemoveUserFromWorkspaceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RemoveUserFromWorkspaceResponse>, callback?: grpc_1.requestCallback<RemoveUserFromWorkspaceResponse>): grpc_1.ClientUnaryCall => {
            return super.RemoveUserFromWorkspace(message, metadata, options, callback);
        };
        ResendWorkspaceMembershipInvitation: GrpcUnaryServiceInterface<ResendWorkspaceMembershipInvitationRequest, ResendWorkspaceMembershipInvitationResponse> = (message: ResendWorkspaceMembershipInvitationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResendWorkspaceMembershipInvitationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResendWorkspaceMembershipInvitationResponse>, callback?: grpc_1.requestCallback<ResendWorkspaceMembershipInvitationResponse>): grpc_1.ClientUnaryCall => {
            return super.ResendWorkspaceMembershipInvitation(message, metadata, options, callback);
        };
        CreateUser: GrpcUnaryServiceInterface<CreateUserRequest, CreateUserResponse> = (message: CreateUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateUserResponse>, callback?: grpc_1.requestCallback<CreateUserResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateUser(message, metadata, options, callback);
        };
        GetUser: GrpcUnaryServiceInterface<GetUserRequest, GetUserResponse> = (message: GetUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetUserResponse>, callback?: grpc_1.requestCallback<GetUserResponse>): grpc_1.ClientUnaryCall => {
            return super.GetUser(message, metadata, options, callback);
        };
        UpdateUser: GrpcUnaryServiceInterface<UpdateUserRequest, UpdateUserResponse> = (message: UpdateUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserResponse>, callback?: grpc_1.requestCallback<UpdateUserResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateUser(message, metadata, options, callback);
        };
        DeleteUser: GrpcUnaryServiceInterface<DeleteUserRequest, DeleteUserResponse> = (message: DeleteUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteUserResponse>, callback?: grpc_1.requestCallback<DeleteUserResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteUser(message, metadata, options, callback);
        };
        CreateApiKey: GrpcUnaryServiceInterface<CreateApiKeyRequest, CreateApiKeyResponse> = (message: CreateApiKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateApiKeyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateApiKeyResponse>, callback?: grpc_1.requestCallback<CreateApiKeyResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateApiKey(message, metadata, options, callback);
        };
        DeleteApiKey: GrpcUnaryServiceInterface<DeleteApiKeyRequest, DeleteApiKeyResponse> = (message: DeleteApiKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteApiKeyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteApiKeyResponse>, callback?: grpc_1.requestCallback<DeleteApiKeyResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteApiKey(message, metadata, options, callback);
        };
        ListApiKeys: GrpcUnaryServiceInterface<ListApiKeysRequest, ListApiKeysResponse> = (message: ListApiKeysRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListApiKeysResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListApiKeysResponse>, callback?: grpc_1.requestCallback<ListApiKeysResponse>): grpc_1.ClientUnaryCall => {
            return super.ListApiKeys(message, metadata, options, callback);
        };
        RegenerateApiKey: GrpcUnaryServiceInterface<RegenerateApiKeyRequest, RegenerateApiKeyResponse> = (message: RegenerateApiKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegenerateApiKeyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegenerateApiKeyResponse>, callback?: grpc_1.requestCallback<RegenerateApiKeyResponse>): grpc_1.ClientUnaryCall => {
            return super.RegenerateApiKey(message, metadata, options, callback);
        };
        ExchangeCredentials: GrpcUnaryServiceInterface<ExchangeCredentialsRequest, ExchangeCredentialsResponse> = (message: ExchangeCredentialsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExchangeCredentialsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExchangeCredentialsResponse>, callback?: grpc_1.requestCallback<ExchangeCredentialsResponse>): grpc_1.ClientUnaryCall => {
            return super.ExchangeCredentials(message, metadata, options, callback);
        };
        ExchangeApiKey: GrpcUnaryServiceInterface<ExchangeApiKeyRequest, ExchangeApiKeyResponse> = (message: ExchangeApiKeyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExchangeApiKeyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExchangeApiKeyResponse>, callback?: grpc_1.requestCallback<ExchangeApiKeyResponse>): grpc_1.ClientUnaryCall => {
            return super.ExchangeApiKey(message, metadata, options, callback);
        };
        ExchangeOAuth2Code: GrpcUnaryServiceInterface<ExchangeOAuth2CodeRequest, ExchangeOAuth2CodeResponse> = (message: ExchangeOAuth2CodeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExchangeOAuth2CodeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExchangeOAuth2CodeResponse>, callback?: grpc_1.requestCallback<ExchangeOAuth2CodeResponse>): grpc_1.ClientUnaryCall => {
            return super.ExchangeOAuth2Code(message, metadata, options, callback);
        };
        ExchangeRefreshToken: GrpcUnaryServiceInterface<ExchangeRefreshTokenRequest, ExchangeRefreshTokenResponse> = (message: ExchangeRefreshTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ExchangeRefreshTokenResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ExchangeRefreshTokenResponse>, callback?: grpc_1.requestCallback<ExchangeRefreshTokenResponse>): grpc_1.ClientUnaryCall => {
            return super.ExchangeRefreshToken(message, metadata, options, callback);
        };
        RevokeToken: GrpcUnaryServiceInterface<RevokeTokenRequest, RevokeTokenResponse> = (message: RevokeTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RevokeTokenResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RevokeTokenResponse>, callback?: grpc_1.requestCallback<RevokeTokenResponse>): grpc_1.ClientUnaryCall => {
            return super.RevokeToken(message, metadata, options, callback);
        };
        GetPublicKey: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetPublicKeyResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPublicKeyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPublicKeyResponse>, callback?: grpc_1.requestCallback<GetPublicKeyResponse>): grpc_1.ClientUnaryCall => {
            return super.GetPublicKey(message, metadata, options, callback);
        };
    }
}
