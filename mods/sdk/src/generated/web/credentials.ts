/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: credentials.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace fonoster.credentials.v1beta2 {
    export class Credentials extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            name?: string;
            username?: string;
            password?: string;
            created_at?: number;
            updated_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set updated_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            username?: string;
            password?: string;
            created_at?: number;
            updated_at?: number;
        }): Credentials {
            const message = new Credentials({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                username?: string;
                password?: string;
                created_at?: number;
                updated_at?: number;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.username.length)
                writer.writeString(3, this.username);
            if (this.password.length)
                writer.writeString(4, this.password);
            if (this.created_at != 0)
                writer.writeInt64(5, this.created_at);
            if (this.updated_at != 0)
                writer.writeInt64(6, this.updated_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Credentials {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Credentials();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.username = reader.readString();
                        break;
                    case 4:
                        message.password = reader.readString();
                        break;
                    case 5:
                        message.created_at = reader.readInt64();
                        break;
                    case 6:
                        message.updated_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Credentials {
            return Credentials.deserialize(bytes);
        }
    }
    export class CreateCredentialsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            username?: string;
            password?: string;
        }): CreateCredentialsRequest {
            const message = new CreateCredentialsRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                username?: string;
                password?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCredentialsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCredentialsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCredentialsRequest {
            return CreateCredentialsRequest.deserialize(bytes);
        }
    }
    export class CreateCredentialsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): CreateCredentialsResponse {
            const message = new CreateCredentialsResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCredentialsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCredentialsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCredentialsResponse {
            return CreateCredentialsResponse.deserialize(bytes);
        }
    }
    export class UpdateCredentialsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            name?: string;
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            username?: string;
            password?: string;
        }): UpdateCredentialsRequest {
            const message = new UpdateCredentialsRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                username?: string;
                password?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.username.length)
                writer.writeString(3, this.username);
            if (this.password.length)
                writer.writeString(4, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCredentialsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCredentialsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.username = reader.readString();
                        break;
                    case 4:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCredentialsRequest {
            return UpdateCredentialsRequest.deserialize(bytes);
        }
    }
    export class UpdateCredentialsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): UpdateCredentialsResponse {
            const message = new UpdateCredentialsResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCredentialsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCredentialsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCredentialsResponse {
            return UpdateCredentialsResponse.deserialize(bytes);
        }
    }
    export class GetCredentialsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): GetCredentialsRequest {
            const message = new GetCredentialsRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCredentialsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCredentialsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCredentialsRequest {
            return GetCredentialsRequest.deserialize(bytes);
        }
    }
    export class DeleteCredentialsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteCredentialsRequest {
            const message = new DeleteCredentialsRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteCredentialsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteCredentialsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteCredentialsRequest {
            return DeleteCredentialsRequest.deserialize(bytes);
        }
    }
    export class DeleteCredentialsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteCredentialsResponse {
            const message = new DeleteCredentialsResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteCredentialsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteCredentialsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteCredentialsResponse {
            return DeleteCredentialsResponse.deserialize(bytes);
        }
    }
    export class ListCredentialsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: string;
        }): ListCredentialsRequest {
            const message = new ListCredentialsRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCredentialsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCredentialsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListCredentialsRequest {
            return ListCredentialsRequest.deserialize(bytes);
        }
    }
    export class ListCredentialsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: Credentials[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, Credentials, 1) as Credentials[];
        }
        set items(value: Credentials[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof Credentials.prototype.toObject>[];
            next_page_token?: string;
        }): ListCredentialsResponse {
            const message = new ListCredentialsResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => Credentials.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof Credentials.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: Credentials) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: Credentials) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCredentialsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCredentialsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Credentials.deserialize(reader), Credentials));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListCredentialsResponse {
            return ListCredentialsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCredentialsServiceService {
        static definition = {
            CreateCredentials: {
                path: "/fonoster.credentials.v1beta2.CredentialsService/CreateCredentials",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateCredentialsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateCredentialsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateCredentialsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateCredentialsResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateCredentials: {
                path: "/fonoster.credentials.v1beta2.CredentialsService/UpdateCredentials",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateCredentialsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateCredentialsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateCredentialsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateCredentialsResponse.deserialize(new Uint8Array(bytes))
            },
            GetCredentials: {
                path: "/fonoster.credentials.v1beta2.CredentialsService/GetCredentials",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCredentialsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCredentialsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Credentials) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Credentials.deserialize(new Uint8Array(bytes))
            },
            DeleteCredentials: {
                path: "/fonoster.credentials.v1beta2.CredentialsService/DeleteCredentials",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteCredentialsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteCredentialsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteCredentialsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteCredentialsResponse.deserialize(new Uint8Array(bytes))
            },
            ListCredentials: {
                path: "/fonoster.credentials.v1beta2.CredentialsService/ListCredentials",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListCredentialsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListCredentialsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListCredentialsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListCredentialsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateCredentials(call: grpc_1.ServerUnaryCall<CreateCredentialsRequest, CreateCredentialsResponse>, callback: grpc_1.sendUnaryData<CreateCredentialsResponse>): void;
        abstract UpdateCredentials(call: grpc_1.ServerUnaryCall<UpdateCredentialsRequest, UpdateCredentialsResponse>, callback: grpc_1.sendUnaryData<UpdateCredentialsResponse>): void;
        abstract GetCredentials(call: grpc_1.ServerUnaryCall<GetCredentialsRequest, Credentials>, callback: grpc_1.sendUnaryData<Credentials>): void;
        abstract DeleteCredentials(call: grpc_1.ServerUnaryCall<DeleteCredentialsRequest, DeleteCredentialsResponse>, callback: grpc_1.sendUnaryData<DeleteCredentialsResponse>): void;
        abstract ListCredentials(call: grpc_1.ServerUnaryCall<ListCredentialsRequest, ListCredentialsResponse>, callback: grpc_1.sendUnaryData<ListCredentialsResponse>): void;
    }
    export class CredentialsServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCredentialsServiceService.definition, "CredentialsService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateCredentials: GrpcUnaryServiceInterface<CreateCredentialsRequest, CreateCredentialsResponse> = (message: CreateCredentialsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateCredentialsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateCredentialsResponse>, callback?: grpc_1.requestCallback<CreateCredentialsResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateCredentials(message, metadata, options, callback);
        };
        UpdateCredentials: GrpcUnaryServiceInterface<UpdateCredentialsRequest, UpdateCredentialsResponse> = (message: UpdateCredentialsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateCredentialsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateCredentialsResponse>, callback?: grpc_1.requestCallback<UpdateCredentialsResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateCredentials(message, metadata, options, callback);
        };
        GetCredentials: GrpcUnaryServiceInterface<GetCredentialsRequest, Credentials> = (message: GetCredentialsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Credentials>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Credentials>, callback?: grpc_1.requestCallback<Credentials>): grpc_1.ClientUnaryCall => {
            return super.GetCredentials(message, metadata, options, callback);
        };
        DeleteCredentials: GrpcUnaryServiceInterface<DeleteCredentialsRequest, DeleteCredentialsResponse> = (message: DeleteCredentialsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteCredentialsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteCredentialsResponse>, callback?: grpc_1.requestCallback<DeleteCredentialsResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteCredentials(message, metadata, options, callback);
        };
        ListCredentials: GrpcUnaryServiceInterface<ListCredentialsRequest, ListCredentialsResponse> = (message: ListCredentialsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListCredentialsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListCredentialsResponse>, callback?: grpc_1.requestCallback<ListCredentialsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListCredentials(message, metadata, options, callback);
        };
    }
}
