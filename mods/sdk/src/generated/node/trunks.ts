/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: trunks.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./acls";
import * as dependency_2 from "./credentials";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace fonoster.trunks.v1beta2 {
    export class TrunkURI extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            host?: string;
            port?: number;
            transport?: string;
            user?: string;
            weight?: number;
            priority?: number;
            enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("transport" in data && data.transport != undefined) {
                    this.transport = data.transport;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("weight" in data && data.weight != undefined) {
                    this.weight = data.weight;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
            }
        }
        get host() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set host(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get transport() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set transport(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get weight() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set weight(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            host?: string;
            port?: number;
            transport?: string;
            user?: string;
            weight?: number;
            priority?: number;
            enabled?: boolean;
        }): TrunkURI {
            const message = new TrunkURI({});
            if (data.host != null) {
                message.host = data.host;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.transport != null) {
                message.transport = data.transport;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.weight != null) {
                message.weight = data.weight;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                host?: string;
                port?: number;
                transport?: string;
                user?: string;
                weight?: number;
                priority?: number;
                enabled?: boolean;
            } = {};
            if (this.host != null) {
                data.host = this.host;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.transport != null) {
                data.transport = this.transport;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.weight != null) {
                data.weight = this.weight;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.host.length)
                writer.writeString(1, this.host);
            if (this.port != 0)
                writer.writeInt32(2, this.port);
            if (this.transport.length)
                writer.writeString(3, this.transport);
            if (this.user.length)
                writer.writeString(4, this.user);
            if (this.weight != 0)
                writer.writeInt32(5, this.weight);
            if (this.priority != 0)
                writer.writeInt32(6, this.priority);
            if (this.enabled != false)
                writer.writeBool(7, this.enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrunkURI {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrunkURI();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.host = reader.readString();
                        break;
                    case 2:
                        message.port = reader.readInt32();
                        break;
                    case 3:
                        message.transport = reader.readString();
                        break;
                    case 4:
                        message.user = reader.readString();
                        break;
                    case 5:
                        message.weight = reader.readInt32();
                        break;
                    case 6:
                        message.priority = reader.readInt32();
                        break;
                    case 7:
                        message.enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrunkURI {
            return TrunkURI.deserialize(bytes);
        }
    }
    export class Trunk extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            name?: string;
            send_register?: boolean;
            inbound_uri?: string;
            created_at?: number;
            updated_at?: number;
            access_control_list?: dependency_1.fonoster.acls.v1beta2.Acl;
            inbound_credentials?: dependency_2.fonoster.credentials.v1beta2.Credentials;
            outbound_credentials?: dependency_2.fonoster.credentials.v1beta2.Credentials;
            uris?: TrunkURI[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("send_register" in data && data.send_register != undefined) {
                    this.send_register = data.send_register;
                }
                if ("inbound_uri" in data && data.inbound_uri != undefined) {
                    this.inbound_uri = data.inbound_uri;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
                if ("access_control_list" in data && data.access_control_list != undefined) {
                    this.access_control_list = data.access_control_list;
                }
                if ("inbound_credentials" in data && data.inbound_credentials != undefined) {
                    this.inbound_credentials = data.inbound_credentials;
                }
                if ("outbound_credentials" in data && data.outbound_credentials != undefined) {
                    this.outbound_credentials = data.outbound_credentials;
                }
                if ("uris" in data && data.uris != undefined) {
                    this.uris = data.uris;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get send_register() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set send_register(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get inbound_uri() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set inbound_uri(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set updated_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get access_control_list() {
            return pb_1.Message.getWrapperField(this, dependency_1.fonoster.acls.v1beta2.Acl, 7) as dependency_1.fonoster.acls.v1beta2.Acl;
        }
        set access_control_list(value: dependency_1.fonoster.acls.v1beta2.Acl) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_access_control_list() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get inbound_credentials() {
            return pb_1.Message.getWrapperField(this, dependency_2.fonoster.credentials.v1beta2.Credentials, 8) as dependency_2.fonoster.credentials.v1beta2.Credentials;
        }
        set inbound_credentials(value: dependency_2.fonoster.credentials.v1beta2.Credentials) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_inbound_credentials() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get outbound_credentials() {
            return pb_1.Message.getWrapperField(this, dependency_2.fonoster.credentials.v1beta2.Credentials, 9) as dependency_2.fonoster.credentials.v1beta2.Credentials;
        }
        set outbound_credentials(value: dependency_2.fonoster.credentials.v1beta2.Credentials) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_outbound_credentials() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get uris() {
            return pb_1.Message.getRepeatedWrapperField(this, TrunkURI, 10) as TrunkURI[];
        }
        set uris(value: TrunkURI[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            send_register?: boolean;
            inbound_uri?: string;
            created_at?: number;
            updated_at?: number;
            access_control_list?: ReturnType<typeof dependency_1.fonoster.acls.v1beta2.Acl.prototype.toObject>;
            inbound_credentials?: ReturnType<typeof dependency_2.fonoster.credentials.v1beta2.Credentials.prototype.toObject>;
            outbound_credentials?: ReturnType<typeof dependency_2.fonoster.credentials.v1beta2.Credentials.prototype.toObject>;
            uris?: ReturnType<typeof TrunkURI.prototype.toObject>[];
        }): Trunk {
            const message = new Trunk({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.send_register != null) {
                message.send_register = data.send_register;
            }
            if (data.inbound_uri != null) {
                message.inbound_uri = data.inbound_uri;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            if (data.access_control_list != null) {
                message.access_control_list = dependency_1.fonoster.acls.v1beta2.Acl.fromObject(data.access_control_list);
            }
            if (data.inbound_credentials != null) {
                message.inbound_credentials = dependency_2.fonoster.credentials.v1beta2.Credentials.fromObject(data.inbound_credentials);
            }
            if (data.outbound_credentials != null) {
                message.outbound_credentials = dependency_2.fonoster.credentials.v1beta2.Credentials.fromObject(data.outbound_credentials);
            }
            if (data.uris != null) {
                message.uris = data.uris.map(item => TrunkURI.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                send_register?: boolean;
                inbound_uri?: string;
                created_at?: number;
                updated_at?: number;
                access_control_list?: ReturnType<typeof dependency_1.fonoster.acls.v1beta2.Acl.prototype.toObject>;
                inbound_credentials?: ReturnType<typeof dependency_2.fonoster.credentials.v1beta2.Credentials.prototype.toObject>;
                outbound_credentials?: ReturnType<typeof dependency_2.fonoster.credentials.v1beta2.Credentials.prototype.toObject>;
                uris?: ReturnType<typeof TrunkURI.prototype.toObject>[];
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.send_register != null) {
                data.send_register = this.send_register;
            }
            if (this.inbound_uri != null) {
                data.inbound_uri = this.inbound_uri;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            if (this.access_control_list != null) {
                data.access_control_list = this.access_control_list.toObject();
            }
            if (this.inbound_credentials != null) {
                data.inbound_credentials = this.inbound_credentials.toObject();
            }
            if (this.outbound_credentials != null) {
                data.outbound_credentials = this.outbound_credentials.toObject();
            }
            if (this.uris != null) {
                data.uris = this.uris.map((item: TrunkURI) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.send_register != false)
                writer.writeBool(3, this.send_register);
            if (this.inbound_uri.length)
                writer.writeString(4, this.inbound_uri);
            if (this.created_at != 0)
                writer.writeInt64(5, this.created_at);
            if (this.updated_at != 0)
                writer.writeInt64(6, this.updated_at);
            if (this.has_access_control_list)
                writer.writeMessage(7, this.access_control_list, () => this.access_control_list.serialize(writer));
            if (this.has_inbound_credentials)
                writer.writeMessage(8, this.inbound_credentials, () => this.inbound_credentials.serialize(writer));
            if (this.has_outbound_credentials)
                writer.writeMessage(9, this.outbound_credentials, () => this.outbound_credentials.serialize(writer));
            if (this.uris.length)
                writer.writeRepeatedMessage(10, this.uris, (item: TrunkURI) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Trunk {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Trunk();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.send_register = reader.readBool();
                        break;
                    case 4:
                        message.inbound_uri = reader.readString();
                        break;
                    case 5:
                        message.created_at = reader.readInt64();
                        break;
                    case 6:
                        message.updated_at = reader.readInt64();
                        break;
                    case 7:
                        reader.readMessage(message.access_control_list, () => message.access_control_list = dependency_1.fonoster.acls.v1beta2.Acl.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.inbound_credentials, () => message.inbound_credentials = dependency_2.fonoster.credentials.v1beta2.Credentials.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.outbound_credentials, () => message.outbound_credentials = dependency_2.fonoster.credentials.v1beta2.Credentials.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.uris, () => pb_1.Message.addToRepeatedWrapperField(message, 10, TrunkURI.deserialize(reader), TrunkURI));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Trunk {
            return Trunk.deserialize(bytes);
        }
    }
    export class CreateTrunkRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            send_register?: boolean;
            inbound_uri?: string;
            access_control_list_ref?: string;
            inbound_credentials_ref?: string;
            outbound_credentials_ref?: string;
            uris?: TrunkURI[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("send_register" in data && data.send_register != undefined) {
                    this.send_register = data.send_register;
                }
                if ("inbound_uri" in data && data.inbound_uri != undefined) {
                    this.inbound_uri = data.inbound_uri;
                }
                if ("access_control_list_ref" in data && data.access_control_list_ref != undefined) {
                    this.access_control_list_ref = data.access_control_list_ref;
                }
                if ("inbound_credentials_ref" in data && data.inbound_credentials_ref != undefined) {
                    this.inbound_credentials_ref = data.inbound_credentials_ref;
                }
                if ("outbound_credentials_ref" in data && data.outbound_credentials_ref != undefined) {
                    this.outbound_credentials_ref = data.outbound_credentials_ref;
                }
                if ("uris" in data && data.uris != undefined) {
                    this.uris = data.uris;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get send_register() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set send_register(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get inbound_uri() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set inbound_uri(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get access_control_list_ref() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set access_control_list_ref(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get inbound_credentials_ref() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set inbound_credentials_ref(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get outbound_credentials_ref() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set outbound_credentials_ref(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get uris() {
            return pb_1.Message.getRepeatedWrapperField(this, TrunkURI, 7) as TrunkURI[];
        }
        set uris(value: TrunkURI[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            name?: string;
            send_register?: boolean;
            inbound_uri?: string;
            access_control_list_ref?: string;
            inbound_credentials_ref?: string;
            outbound_credentials_ref?: string;
            uris?: ReturnType<typeof TrunkURI.prototype.toObject>[];
        }): CreateTrunkRequest {
            const message = new CreateTrunkRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.send_register != null) {
                message.send_register = data.send_register;
            }
            if (data.inbound_uri != null) {
                message.inbound_uri = data.inbound_uri;
            }
            if (data.access_control_list_ref != null) {
                message.access_control_list_ref = data.access_control_list_ref;
            }
            if (data.inbound_credentials_ref != null) {
                message.inbound_credentials_ref = data.inbound_credentials_ref;
            }
            if (data.outbound_credentials_ref != null) {
                message.outbound_credentials_ref = data.outbound_credentials_ref;
            }
            if (data.uris != null) {
                message.uris = data.uris.map(item => TrunkURI.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                send_register?: boolean;
                inbound_uri?: string;
                access_control_list_ref?: string;
                inbound_credentials_ref?: string;
                outbound_credentials_ref?: string;
                uris?: ReturnType<typeof TrunkURI.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.send_register != null) {
                data.send_register = this.send_register;
            }
            if (this.inbound_uri != null) {
                data.inbound_uri = this.inbound_uri;
            }
            if (this.access_control_list_ref != null) {
                data.access_control_list_ref = this.access_control_list_ref;
            }
            if (this.inbound_credentials_ref != null) {
                data.inbound_credentials_ref = this.inbound_credentials_ref;
            }
            if (this.outbound_credentials_ref != null) {
                data.outbound_credentials_ref = this.outbound_credentials_ref;
            }
            if (this.uris != null) {
                data.uris = this.uris.map((item: TrunkURI) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.send_register != false)
                writer.writeBool(2, this.send_register);
            if (this.inbound_uri.length)
                writer.writeString(3, this.inbound_uri);
            if (this.access_control_list_ref.length)
                writer.writeString(4, this.access_control_list_ref);
            if (this.inbound_credentials_ref.length)
                writer.writeString(5, this.inbound_credentials_ref);
            if (this.outbound_credentials_ref.length)
                writer.writeString(6, this.outbound_credentials_ref);
            if (this.uris.length)
                writer.writeRepeatedMessage(7, this.uris, (item: TrunkURI) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTrunkRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTrunkRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.send_register = reader.readBool();
                        break;
                    case 3:
                        message.inbound_uri = reader.readString();
                        break;
                    case 4:
                        message.access_control_list_ref = reader.readString();
                        break;
                    case 5:
                        message.inbound_credentials_ref = reader.readString();
                        break;
                    case 6:
                        message.outbound_credentials_ref = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.uris, () => pb_1.Message.addToRepeatedWrapperField(message, 7, TrunkURI.deserialize(reader), TrunkURI));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTrunkRequest {
            return CreateTrunkRequest.deserialize(bytes);
        }
    }
    export class CreateTrunkResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): CreateTrunkResponse {
            const message = new CreateTrunkResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTrunkResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTrunkResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTrunkResponse {
            return CreateTrunkResponse.deserialize(bytes);
        }
    }
    export class UpdateTrunkRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            name?: string;
            send_register?: boolean;
            inbound_uri?: string;
            access_control_list_ref?: string;
            inbound_credentials_ref?: string;
            outbound_credentials_ref?: string;
            uris?: TrunkURI[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("send_register" in data && data.send_register != undefined) {
                    this.send_register = data.send_register;
                }
                if ("inbound_uri" in data && data.inbound_uri != undefined) {
                    this.inbound_uri = data.inbound_uri;
                }
                if ("access_control_list_ref" in data && data.access_control_list_ref != undefined) {
                    this.access_control_list_ref = data.access_control_list_ref;
                }
                if ("inbound_credentials_ref" in data && data.inbound_credentials_ref != undefined) {
                    this.inbound_credentials_ref = data.inbound_credentials_ref;
                }
                if ("outbound_credentials_ref" in data && data.outbound_credentials_ref != undefined) {
                    this.outbound_credentials_ref = data.outbound_credentials_ref;
                }
                if ("uris" in data && data.uris != undefined) {
                    this.uris = data.uris;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get send_register() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set send_register(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get inbound_uri() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set inbound_uri(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get access_control_list_ref() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set access_control_list_ref(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get inbound_credentials_ref() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set inbound_credentials_ref(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get outbound_credentials_ref() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set outbound_credentials_ref(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get uris() {
            return pb_1.Message.getRepeatedWrapperField(this, TrunkURI, 8) as TrunkURI[];
        }
        set uris(value: TrunkURI[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            send_register?: boolean;
            inbound_uri?: string;
            access_control_list_ref?: string;
            inbound_credentials_ref?: string;
            outbound_credentials_ref?: string;
            uris?: ReturnType<typeof TrunkURI.prototype.toObject>[];
        }): UpdateTrunkRequest {
            const message = new UpdateTrunkRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.send_register != null) {
                message.send_register = data.send_register;
            }
            if (data.inbound_uri != null) {
                message.inbound_uri = data.inbound_uri;
            }
            if (data.access_control_list_ref != null) {
                message.access_control_list_ref = data.access_control_list_ref;
            }
            if (data.inbound_credentials_ref != null) {
                message.inbound_credentials_ref = data.inbound_credentials_ref;
            }
            if (data.outbound_credentials_ref != null) {
                message.outbound_credentials_ref = data.outbound_credentials_ref;
            }
            if (data.uris != null) {
                message.uris = data.uris.map(item => TrunkURI.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                send_register?: boolean;
                inbound_uri?: string;
                access_control_list_ref?: string;
                inbound_credentials_ref?: string;
                outbound_credentials_ref?: string;
                uris?: ReturnType<typeof TrunkURI.prototype.toObject>[];
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.send_register != null) {
                data.send_register = this.send_register;
            }
            if (this.inbound_uri != null) {
                data.inbound_uri = this.inbound_uri;
            }
            if (this.access_control_list_ref != null) {
                data.access_control_list_ref = this.access_control_list_ref;
            }
            if (this.inbound_credentials_ref != null) {
                data.inbound_credentials_ref = this.inbound_credentials_ref;
            }
            if (this.outbound_credentials_ref != null) {
                data.outbound_credentials_ref = this.outbound_credentials_ref;
            }
            if (this.uris != null) {
                data.uris = this.uris.map((item: TrunkURI) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.send_register != false)
                writer.writeBool(3, this.send_register);
            if (this.inbound_uri.length)
                writer.writeString(4, this.inbound_uri);
            if (this.access_control_list_ref.length)
                writer.writeString(5, this.access_control_list_ref);
            if (this.inbound_credentials_ref.length)
                writer.writeString(6, this.inbound_credentials_ref);
            if (this.outbound_credentials_ref.length)
                writer.writeString(7, this.outbound_credentials_ref);
            if (this.uris.length)
                writer.writeRepeatedMessage(8, this.uris, (item: TrunkURI) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTrunkRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTrunkRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.send_register = reader.readBool();
                        break;
                    case 4:
                        message.inbound_uri = reader.readString();
                        break;
                    case 5:
                        message.access_control_list_ref = reader.readString();
                        break;
                    case 6:
                        message.inbound_credentials_ref = reader.readString();
                        break;
                    case 7:
                        message.outbound_credentials_ref = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.uris, () => pb_1.Message.addToRepeatedWrapperField(message, 8, TrunkURI.deserialize(reader), TrunkURI));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTrunkRequest {
            return UpdateTrunkRequest.deserialize(bytes);
        }
    }
    export class UpdateTrunkResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): UpdateTrunkResponse {
            const message = new UpdateTrunkResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTrunkResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTrunkResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTrunkResponse {
            return UpdateTrunkResponse.deserialize(bytes);
        }
    }
    export class GetTrunkRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): GetTrunkRequest {
            const message = new GetTrunkRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTrunkRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTrunkRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTrunkRequest {
            return GetTrunkRequest.deserialize(bytes);
        }
    }
    export class DeleteTrunkRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteTrunkRequest {
            const message = new DeleteTrunkRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTrunkRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTrunkRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTrunkRequest {
            return DeleteTrunkRequest.deserialize(bytes);
        }
    }
    export class DeleteTrunkResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteTrunkResponse {
            const message = new DeleteTrunkResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTrunkResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTrunkResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTrunkResponse {
            return DeleteTrunkResponse.deserialize(bytes);
        }
    }
    export class ListTrunkRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: string;
        }): ListTrunkRequest {
            const message = new ListTrunkRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTrunkRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTrunkRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTrunkRequest {
            return ListTrunkRequest.deserialize(bytes);
        }
    }
    export class ListTrunksResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: Trunk[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, Trunk, 1) as Trunk[];
        }
        set items(value: Trunk[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof Trunk.prototype.toObject>[];
            next_page_token?: string;
        }): ListTrunksResponse {
            const message = new ListTrunksResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => Trunk.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof Trunk.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: Trunk) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: Trunk) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTrunksResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTrunksResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Trunk.deserialize(reader), Trunk));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTrunksResponse {
            return ListTrunksResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTrunksService {
        static definition = {
            CreateTrunk: {
                path: "/fonoster.trunks.v1beta2.Trunks/CreateTrunk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateTrunkRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateTrunkRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateTrunkResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateTrunkResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateTrunk: {
                path: "/fonoster.trunks.v1beta2.Trunks/UpdateTrunk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateTrunkRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateTrunkRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateTrunkResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateTrunkResponse.deserialize(new Uint8Array(bytes))
            },
            GetTrunk: {
                path: "/fonoster.trunks.v1beta2.Trunks/GetTrunk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTrunkRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTrunkRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Trunk) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Trunk.deserialize(new Uint8Array(bytes))
            },
            DeleteTrunk: {
                path: "/fonoster.trunks.v1beta2.Trunks/DeleteTrunk",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteTrunkRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteTrunkRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteTrunkResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteTrunkResponse.deserialize(new Uint8Array(bytes))
            },
            ListTrunks: {
                path: "/fonoster.trunks.v1beta2.Trunks/ListTrunks",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListTrunkRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListTrunkRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListTrunksResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListTrunksResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateTrunk(call: grpc_1.ServerUnaryCall<CreateTrunkRequest, CreateTrunkResponse>, callback: grpc_1.sendUnaryData<CreateTrunkResponse>): void;
        abstract UpdateTrunk(call: grpc_1.ServerUnaryCall<UpdateTrunkRequest, UpdateTrunkResponse>, callback: grpc_1.sendUnaryData<UpdateTrunkResponse>): void;
        abstract GetTrunk(call: grpc_1.ServerUnaryCall<GetTrunkRequest, Trunk>, callback: grpc_1.sendUnaryData<Trunk>): void;
        abstract DeleteTrunk(call: grpc_1.ServerUnaryCall<DeleteTrunkRequest, DeleteTrunkResponse>, callback: grpc_1.sendUnaryData<DeleteTrunkResponse>): void;
        abstract ListTrunks(call: grpc_1.ServerUnaryCall<ListTrunkRequest, ListTrunksResponse>, callback: grpc_1.sendUnaryData<ListTrunksResponse>): void;
    }
    export class TrunksClient extends grpc_1.makeGenericClientConstructor(UnimplementedTrunksService.definition, "Trunks", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateTrunk: GrpcUnaryServiceInterface<CreateTrunkRequest, CreateTrunkResponse> = (message: CreateTrunkRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateTrunkResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateTrunkResponse>, callback?: grpc_1.requestCallback<CreateTrunkResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateTrunk(message, metadata, options, callback);
        };
        UpdateTrunk: GrpcUnaryServiceInterface<UpdateTrunkRequest, UpdateTrunkResponse> = (message: UpdateTrunkRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateTrunkResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateTrunkResponse>, callback?: grpc_1.requestCallback<UpdateTrunkResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateTrunk(message, metadata, options, callback);
        };
        GetTrunk: GrpcUnaryServiceInterface<GetTrunkRequest, Trunk> = (message: GetTrunkRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Trunk>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Trunk>, callback?: grpc_1.requestCallback<Trunk>): grpc_1.ClientUnaryCall => {
            return super.GetTrunk(message, metadata, options, callback);
        };
        DeleteTrunk: GrpcUnaryServiceInterface<DeleteTrunkRequest, DeleteTrunkResponse> = (message: DeleteTrunkRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteTrunkResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteTrunkResponse>, callback?: grpc_1.requestCallback<DeleteTrunkResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteTrunk(message, metadata, options, callback);
        };
        ListTrunks: GrpcUnaryServiceInterface<ListTrunkRequest, ListTrunksResponse> = (message: ListTrunkRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListTrunksResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListTrunksResponse>, callback?: grpc_1.requestCallback<ListTrunksResponse>): grpc_1.ClientUnaryCall => {
            return super.ListTrunks(message, metadata, options, callback);
        };
    }
}
