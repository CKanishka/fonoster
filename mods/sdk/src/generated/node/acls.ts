/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: acls.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace fonoster.acls.v1beta2 {
    export class Acl extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            name?: string;
            allow?: string[];
            deny?: string[];
            created_at?: number;
            updated_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("allow" in data && data.allow != undefined) {
                    this.allow = data.allow;
                }
                if ("deny" in data && data.deny != undefined) {
                    this.deny = data.deny;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get allow() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set allow(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get deny() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set deny(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set updated_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            allow?: string[];
            deny?: string[];
            created_at?: number;
            updated_at?: number;
        }): Acl {
            const message = new Acl({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.allow != null) {
                message.allow = data.allow;
            }
            if (data.deny != null) {
                message.deny = data.deny;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                allow?: string[];
                deny?: string[];
                created_at?: number;
                updated_at?: number;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.allow != null) {
                data.allow = this.allow;
            }
            if (this.deny != null) {
                data.deny = this.deny;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.allow.length)
                writer.writeRepeatedString(3, this.allow);
            if (this.deny.length)
                writer.writeRepeatedString(4, this.deny);
            if (this.created_at != 0)
                writer.writeInt64(5, this.created_at);
            if (this.updated_at != 0)
                writer.writeInt64(6, this.updated_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Acl {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Acl();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.created_at = reader.readInt64();
                        break;
                    case 6:
                        message.updated_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Acl {
            return Acl.deserialize(bytes);
        }
    }
    export class CreateAclRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            allow?: string[];
            deny?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("allow" in data && data.allow != undefined) {
                    this.allow = data.allow;
                }
                if ("deny" in data && data.deny != undefined) {
                    this.deny = data.deny;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get allow() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set allow(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get deny() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set deny(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            allow?: string[];
            deny?: string[];
        }): CreateAclRequest {
            const message = new CreateAclRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.allow != null) {
                message.allow = data.allow;
            }
            if (data.deny != null) {
                message.deny = data.deny;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                allow?: string[];
                deny?: string[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.allow != null) {
                data.allow = this.allow;
            }
            if (this.deny != null) {
                data.deny = this.deny;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.allow.length)
                writer.writeRepeatedString(2, this.allow);
            if (this.deny.length)
                writer.writeRepeatedString(3, this.deny);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAclRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAclRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAclRequest {
            return CreateAclRequest.deserialize(bytes);
        }
    }
    export class CreateAclResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): CreateAclResponse {
            const message = new CreateAclResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAclResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAclResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAclResponse {
            return CreateAclResponse.deserialize(bytes);
        }
    }
    export class UpdateAclRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            name?: string;
            allow?: string[];
            deny?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("allow" in data && data.allow != undefined) {
                    this.allow = data.allow;
                }
                if ("deny" in data && data.deny != undefined) {
                    this.deny = data.deny;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get allow() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set allow(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get deny() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set deny(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            allow?: string[];
            deny?: string[];
        }): UpdateAclRequest {
            const message = new UpdateAclRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.allow != null) {
                message.allow = data.allow;
            }
            if (data.deny != null) {
                message.deny = data.deny;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                allow?: string[];
                deny?: string[];
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.allow != null) {
                data.allow = this.allow;
            }
            if (this.deny != null) {
                data.deny = this.deny;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.allow.length)
                writer.writeRepeatedString(3, this.allow);
            if (this.deny.length)
                writer.writeRepeatedString(4, this.deny);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAclRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAclRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAclRequest {
            return UpdateAclRequest.deserialize(bytes);
        }
    }
    export class UpdateAclResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): UpdateAclResponse {
            const message = new UpdateAclResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAclResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAclResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAclResponse {
            return UpdateAclResponse.deserialize(bytes);
        }
    }
    export class GetAclRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): GetAclRequest {
            const message = new GetAclRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAclRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAclRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAclRequest {
            return GetAclRequest.deserialize(bytes);
        }
    }
    export class DeleteAclRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteAclRequest {
            const message = new DeleteAclRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAclRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAclRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAclRequest {
            return DeleteAclRequest.deserialize(bytes);
        }
    }
    export class DeleteAclResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteAclResponse {
            const message = new DeleteAclResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAclResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAclResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAclResponse {
            return DeleteAclResponse.deserialize(bytes);
        }
    }
    export class ListAclsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: string;
        }): ListAclsRequest {
            const message = new ListAclsRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAclsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAclsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListAclsRequest {
            return ListAclsRequest.deserialize(bytes);
        }
    }
    export class ListAclsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: Acl[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, Acl, 1) as Acl[];
        }
        set items(value: Acl[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof Acl.prototype.toObject>[];
            next_page_token?: string;
        }): ListAclsResponse {
            const message = new ListAclsResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => Acl.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof Acl.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: Acl) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: Acl) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAclsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAclsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Acl.deserialize(reader), Acl));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListAclsResponse {
            return ListAclsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAclsService {
        static definition = {
            CreateAcl: {
                path: "/fonoster.acls.v1beta2.Acls/CreateAcl",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateAclRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateAclRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateAclResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateAclResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateAcl: {
                path: "/fonoster.acls.v1beta2.Acls/UpdateAcl",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateAclRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateAclRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateAclResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateAclResponse.deserialize(new Uint8Array(bytes))
            },
            GetAcl: {
                path: "/fonoster.acls.v1beta2.Acls/GetAcl",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAclRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAclRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Acl) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Acl.deserialize(new Uint8Array(bytes))
            },
            DeleteAcl: {
                path: "/fonoster.acls.v1beta2.Acls/DeleteAcl",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteAclRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteAclRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteAclResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteAclResponse.deserialize(new Uint8Array(bytes))
            },
            ListAcls: {
                path: "/fonoster.acls.v1beta2.Acls/ListAcls",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListAclsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListAclsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListAclsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListAclsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateAcl(call: grpc_1.ServerUnaryCall<CreateAclRequest, CreateAclResponse>, callback: grpc_1.sendUnaryData<CreateAclResponse>): void;
        abstract UpdateAcl(call: grpc_1.ServerUnaryCall<UpdateAclRequest, UpdateAclResponse>, callback: grpc_1.sendUnaryData<UpdateAclResponse>): void;
        abstract GetAcl(call: grpc_1.ServerUnaryCall<GetAclRequest, Acl>, callback: grpc_1.sendUnaryData<Acl>): void;
        abstract DeleteAcl(call: grpc_1.ServerUnaryCall<DeleteAclRequest, DeleteAclResponse>, callback: grpc_1.sendUnaryData<DeleteAclResponse>): void;
        abstract ListAcls(call: grpc_1.ServerUnaryCall<ListAclsRequest, ListAclsResponse>, callback: grpc_1.sendUnaryData<ListAclsResponse>): void;
    }
    export class AclsClient extends grpc_1.makeGenericClientConstructor(UnimplementedAclsService.definition, "Acls", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateAcl: GrpcUnaryServiceInterface<CreateAclRequest, CreateAclResponse> = (message: CreateAclRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateAclResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateAclResponse>, callback?: grpc_1.requestCallback<CreateAclResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateAcl(message, metadata, options, callback);
        };
        UpdateAcl: GrpcUnaryServiceInterface<UpdateAclRequest, UpdateAclResponse> = (message: UpdateAclRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateAclResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateAclResponse>, callback?: grpc_1.requestCallback<UpdateAclResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateAcl(message, metadata, options, callback);
        };
        GetAcl: GrpcUnaryServiceInterface<GetAclRequest, Acl> = (message: GetAclRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Acl>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Acl>, callback?: grpc_1.requestCallback<Acl>): grpc_1.ClientUnaryCall => {
            return super.GetAcl(message, metadata, options, callback);
        };
        DeleteAcl: GrpcUnaryServiceInterface<DeleteAclRequest, DeleteAclResponse> = (message: DeleteAclRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteAclResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteAclResponse>, callback?: grpc_1.requestCallback<DeleteAclResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteAcl(message, metadata, options, callback);
        };
        ListAcls: GrpcUnaryServiceInterface<ListAclsRequest, ListAclsResponse> = (message: ListAclsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListAclsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListAclsResponse>, callback?: grpc_1.requestCallback<ListAclsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListAcls(message, metadata, options, callback);
        };
    }
}
