/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: agents.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./domains";
import * as dependency_2 from "./credentials";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace fonoster.agents.v1beta2 {
    export enum Privacy {
        PRIVATE = 0,
        NONE = 1
    }
    export class Agent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            name?: string;
            username?: string;
            privacy?: Privacy;
            enabled?: boolean;
            created_at?: number;
            updated_at?: number;
            max_contacts?: number;
            expires?: number;
            domain?: dependency_1.fonoster.domains.v1beta2.Domain;
            credentials?: dependency_2.fonoster.credentials.v1beta2.Credentials;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("privacy" in data && data.privacy != undefined) {
                    this.privacy = data.privacy;
                }
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
                if ("max_contacts" in data && data.max_contacts != undefined) {
                    this.max_contacts = data.max_contacts;
                }
                if ("expires" in data && data.expires != undefined) {
                    this.expires = data.expires;
                }
                if ("domain" in data && data.domain != undefined) {
                    this.domain = data.domain;
                }
                if ("credentials" in data && data.credentials != undefined) {
                    this.credentials = data.credentials;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get privacy() {
            return pb_1.Message.getFieldWithDefault(this, 4, Privacy.PRIVATE) as Privacy;
        }
        set privacy(value: Privacy) {
            pb_1.Message.setField(this, 4, value);
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set updated_at(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get max_contacts() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set max_contacts(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get expires() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set expires(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get domain() {
            return pb_1.Message.getWrapperField(this, dependency_1.fonoster.domains.v1beta2.Domain, 10) as dependency_1.fonoster.domains.v1beta2.Domain;
        }
        set domain(value: dependency_1.fonoster.domains.v1beta2.Domain) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_domain() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get credentials() {
            return pb_1.Message.getWrapperField(this, dependency_2.fonoster.credentials.v1beta2.Credentials, 11) as dependency_2.fonoster.credentials.v1beta2.Credentials;
        }
        set credentials(value: dependency_2.fonoster.credentials.v1beta2.Credentials) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_credentials() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            username?: string;
            privacy?: Privacy;
            enabled?: boolean;
            created_at?: number;
            updated_at?: number;
            max_contacts?: number;
            expires?: number;
            domain?: ReturnType<typeof dependency_1.fonoster.domains.v1beta2.Domain.prototype.toObject>;
            credentials?: ReturnType<typeof dependency_2.fonoster.credentials.v1beta2.Credentials.prototype.toObject>;
        }): Agent {
            const message = new Agent({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.privacy != null) {
                message.privacy = data.privacy;
            }
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            if (data.max_contacts != null) {
                message.max_contacts = data.max_contacts;
            }
            if (data.expires != null) {
                message.expires = data.expires;
            }
            if (data.domain != null) {
                message.domain = dependency_1.fonoster.domains.v1beta2.Domain.fromObject(data.domain);
            }
            if (data.credentials != null) {
                message.credentials = dependency_2.fonoster.credentials.v1beta2.Credentials.fromObject(data.credentials);
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                username?: string;
                privacy?: Privacy;
                enabled?: boolean;
                created_at?: number;
                updated_at?: number;
                max_contacts?: number;
                expires?: number;
                domain?: ReturnType<typeof dependency_1.fonoster.domains.v1beta2.Domain.prototype.toObject>;
                credentials?: ReturnType<typeof dependency_2.fonoster.credentials.v1beta2.Credentials.prototype.toObject>;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.privacy != null) {
                data.privacy = this.privacy;
            }
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            if (this.max_contacts != null) {
                data.max_contacts = this.max_contacts;
            }
            if (this.expires != null) {
                data.expires = this.expires;
            }
            if (this.domain != null) {
                data.domain = this.domain.toObject();
            }
            if (this.credentials != null) {
                data.credentials = this.credentials.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.username.length)
                writer.writeString(3, this.username);
            if (this.privacy != Privacy.PRIVATE)
                writer.writeEnum(4, this.privacy);
            if (this.enabled != false)
                writer.writeBool(5, this.enabled);
            if (this.created_at != 0)
                writer.writeInt64(6, this.created_at);
            if (this.updated_at != 0)
                writer.writeInt64(7, this.updated_at);
            if (this.max_contacts != 0)
                writer.writeInt32(8, this.max_contacts);
            if (this.expires != 0)
                writer.writeInt32(9, this.expires);
            if (this.has_domain)
                writer.writeMessage(10, this.domain, () => this.domain.serialize(writer));
            if (this.has_credentials)
                writer.writeMessage(11, this.credentials, () => this.credentials.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Agent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Agent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.username = reader.readString();
                        break;
                    case 4:
                        message.privacy = reader.readEnum();
                        break;
                    case 5:
                        message.enabled = reader.readBool();
                        break;
                    case 6:
                        message.created_at = reader.readInt64();
                        break;
                    case 7:
                        message.updated_at = reader.readInt64();
                        break;
                    case 8:
                        message.max_contacts = reader.readInt32();
                        break;
                    case 9:
                        message.expires = reader.readInt32();
                        break;
                    case 10:
                        reader.readMessage(message.domain, () => message.domain = dependency_1.fonoster.domains.v1beta2.Domain.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.credentials, () => message.credentials = dependency_2.fonoster.credentials.v1beta2.Credentials.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Agent {
            return Agent.deserialize(bytes);
        }
    }
    export class CreateAgentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            username?: string;
            privacy?: Privacy;
            enabled?: boolean;
            domain_ref?: string;
            credentials_ref?: string;
            max_contacts?: number;
            expires?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("privacy" in data && data.privacy != undefined) {
                    this.privacy = data.privacy;
                }
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
                if ("domain_ref" in data && data.domain_ref != undefined) {
                    this.domain_ref = data.domain_ref;
                }
                if ("credentials_ref" in data && data.credentials_ref != undefined) {
                    this.credentials_ref = data.credentials_ref;
                }
                if ("max_contacts" in data && data.max_contacts != undefined) {
                    this.max_contacts = data.max_contacts;
                }
                if ("expires" in data && data.expires != undefined) {
                    this.expires = data.expires;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get privacy() {
            return pb_1.Message.getFieldWithDefault(this, 3, Privacy.PRIVATE) as Privacy;
        }
        set privacy(value: Privacy) {
            pb_1.Message.setField(this, 3, value);
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get domain_ref() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set domain_ref(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get credentials_ref() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set credentials_ref(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get max_contacts() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set max_contacts(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get expires() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set expires(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            name?: string;
            username?: string;
            privacy?: Privacy;
            enabled?: boolean;
            domain_ref?: string;
            credentials_ref?: string;
            max_contacts?: number;
            expires?: number;
        }): CreateAgentRequest {
            const message = new CreateAgentRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.privacy != null) {
                message.privacy = data.privacy;
            }
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            if (data.domain_ref != null) {
                message.domain_ref = data.domain_ref;
            }
            if (data.credentials_ref != null) {
                message.credentials_ref = data.credentials_ref;
            }
            if (data.max_contacts != null) {
                message.max_contacts = data.max_contacts;
            }
            if (data.expires != null) {
                message.expires = data.expires;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                username?: string;
                privacy?: Privacy;
                enabled?: boolean;
                domain_ref?: string;
                credentials_ref?: string;
                max_contacts?: number;
                expires?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.privacy != null) {
                data.privacy = this.privacy;
            }
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            if (this.domain_ref != null) {
                data.domain_ref = this.domain_ref;
            }
            if (this.credentials_ref != null) {
                data.credentials_ref = this.credentials_ref;
            }
            if (this.max_contacts != null) {
                data.max_contacts = this.max_contacts;
            }
            if (this.expires != null) {
                data.expires = this.expires;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.privacy != Privacy.PRIVATE)
                writer.writeEnum(3, this.privacy);
            if (this.enabled != false)
                writer.writeBool(4, this.enabled);
            if (this.domain_ref.length)
                writer.writeString(5, this.domain_ref);
            if (this.credentials_ref.length)
                writer.writeString(6, this.credentials_ref);
            if (this.max_contacts != 0)
                writer.writeInt32(7, this.max_contacts);
            if (this.expires != 0)
                writer.writeInt32(8, this.expires);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAgentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAgentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.privacy = reader.readEnum();
                        break;
                    case 4:
                        message.enabled = reader.readBool();
                        break;
                    case 5:
                        message.domain_ref = reader.readString();
                        break;
                    case 6:
                        message.credentials_ref = reader.readString();
                        break;
                    case 7:
                        message.max_contacts = reader.readInt32();
                        break;
                    case 8:
                        message.expires = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAgentRequest {
            return CreateAgentRequest.deserialize(bytes);
        }
    }
    export class CreateAgentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): CreateAgentResponse {
            const message = new CreateAgentResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateAgentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateAgentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateAgentResponse {
            return CreateAgentResponse.deserialize(bytes);
        }
    }
    export class UpdateAgentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            name?: string;
            privacy?: Privacy;
            enabled?: boolean;
            domain_ref?: string;
            credentials_ref?: string;
            max_contacts?: number;
            expires?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("privacy" in data && data.privacy != undefined) {
                    this.privacy = data.privacy;
                }
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
                if ("domain_ref" in data && data.domain_ref != undefined) {
                    this.domain_ref = data.domain_ref;
                }
                if ("credentials_ref" in data && data.credentials_ref != undefined) {
                    this.credentials_ref = data.credentials_ref;
                }
                if ("max_contacts" in data && data.max_contacts != undefined) {
                    this.max_contacts = data.max_contacts;
                }
                if ("expires" in data && data.expires != undefined) {
                    this.expires = data.expires;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get privacy() {
            return pb_1.Message.getFieldWithDefault(this, 3, Privacy.PRIVATE) as Privacy;
        }
        set privacy(value: Privacy) {
            pb_1.Message.setField(this, 3, value);
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get domain_ref() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set domain_ref(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get credentials_ref() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set credentials_ref(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get max_contacts() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set max_contacts(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get expires() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set expires(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            privacy?: Privacy;
            enabled?: boolean;
            domain_ref?: string;
            credentials_ref?: string;
            max_contacts?: number;
            expires?: number;
        }): UpdateAgentRequest {
            const message = new UpdateAgentRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.privacy != null) {
                message.privacy = data.privacy;
            }
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            if (data.domain_ref != null) {
                message.domain_ref = data.domain_ref;
            }
            if (data.credentials_ref != null) {
                message.credentials_ref = data.credentials_ref;
            }
            if (data.max_contacts != null) {
                message.max_contacts = data.max_contacts;
            }
            if (data.expires != null) {
                message.expires = data.expires;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                privacy?: Privacy;
                enabled?: boolean;
                domain_ref?: string;
                credentials_ref?: string;
                max_contacts?: number;
                expires?: number;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.privacy != null) {
                data.privacy = this.privacy;
            }
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            if (this.domain_ref != null) {
                data.domain_ref = this.domain_ref;
            }
            if (this.credentials_ref != null) {
                data.credentials_ref = this.credentials_ref;
            }
            if (this.max_contacts != null) {
                data.max_contacts = this.max_contacts;
            }
            if (this.expires != null) {
                data.expires = this.expires;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.privacy != Privacy.PRIVATE)
                writer.writeEnum(3, this.privacy);
            if (this.enabled != false)
                writer.writeBool(4, this.enabled);
            if (this.domain_ref.length)
                writer.writeString(5, this.domain_ref);
            if (this.credentials_ref.length)
                writer.writeString(6, this.credentials_ref);
            if (this.max_contacts != 0)
                writer.writeInt32(7, this.max_contacts);
            if (this.expires != 0)
                writer.writeInt32(8, this.expires);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAgentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAgentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.privacy = reader.readEnum();
                        break;
                    case 4:
                        message.enabled = reader.readBool();
                        break;
                    case 5:
                        message.domain_ref = reader.readString();
                        break;
                    case 6:
                        message.credentials_ref = reader.readString();
                        break;
                    case 7:
                        message.max_contacts = reader.readInt32();
                        break;
                    case 8:
                        message.expires = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAgentRequest {
            return UpdateAgentRequest.deserialize(bytes);
        }
    }
    export class UpdateAgentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): UpdateAgentResponse {
            const message = new UpdateAgentResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateAgentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateAgentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateAgentResponse {
            return UpdateAgentResponse.deserialize(bytes);
        }
    }
    export class GetAgentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): GetAgentRequest {
            const message = new GetAgentRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAgentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAgentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAgentRequest {
            return GetAgentRequest.deserialize(bytes);
        }
    }
    export class DeleteAgentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteAgentRequest {
            const message = new DeleteAgentRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAgentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAgentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAgentRequest {
            return DeleteAgentRequest.deserialize(bytes);
        }
    }
    export class DeleteAgentResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteAgentResponse {
            const message = new DeleteAgentResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAgentResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAgentResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAgentResponse {
            return DeleteAgentResponse.deserialize(bytes);
        }
    }
    export class ListAgentsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: string;
        }): ListAgentsRequest {
            const message = new ListAgentsRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAgentsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAgentsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListAgentsRequest {
            return ListAgentsRequest.deserialize(bytes);
        }
    }
    export class ListAgentsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: Agent[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, Agent, 1) as Agent[];
        }
        set items(value: Agent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof Agent.prototype.toObject>[];
            next_page_token?: string;
        }): ListAgentsResponse {
            const message = new ListAgentsResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => Agent.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof Agent.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: Agent) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: Agent) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListAgentsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListAgentsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Agent.deserialize(reader), Agent));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListAgentsResponse {
            return ListAgentsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAgentsService {
        static definition = {
            CreateAgent: {
                path: "/fonoster.agents.v1beta2.Agents/CreateAgent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateAgentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateAgentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateAgentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateAgentResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateAgent: {
                path: "/fonoster.agents.v1beta2.Agents/UpdateAgent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateAgentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateAgentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateAgentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateAgentResponse.deserialize(new Uint8Array(bytes))
            },
            GetAgent: {
                path: "/fonoster.agents.v1beta2.Agents/GetAgent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAgentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAgentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Agent) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Agent.deserialize(new Uint8Array(bytes))
            },
            DeleteAgent: {
                path: "/fonoster.agents.v1beta2.Agents/DeleteAgent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteAgentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteAgentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteAgentResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteAgentResponse.deserialize(new Uint8Array(bytes))
            },
            ListAgents: {
                path: "/fonoster.agents.v1beta2.Agents/ListAgents",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListAgentsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListAgentsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListAgentsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListAgentsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateAgent(call: grpc_1.ServerUnaryCall<CreateAgentRequest, CreateAgentResponse>, callback: grpc_1.sendUnaryData<CreateAgentResponse>): void;
        abstract UpdateAgent(call: grpc_1.ServerUnaryCall<UpdateAgentRequest, UpdateAgentResponse>, callback: grpc_1.sendUnaryData<UpdateAgentResponse>): void;
        abstract GetAgent(call: grpc_1.ServerUnaryCall<GetAgentRequest, Agent>, callback: grpc_1.sendUnaryData<Agent>): void;
        abstract DeleteAgent(call: grpc_1.ServerUnaryCall<DeleteAgentRequest, DeleteAgentResponse>, callback: grpc_1.sendUnaryData<DeleteAgentResponse>): void;
        abstract ListAgents(call: grpc_1.ServerUnaryCall<ListAgentsRequest, ListAgentsResponse>, callback: grpc_1.sendUnaryData<ListAgentsResponse>): void;
    }
    export class AgentsClient extends grpc_1.makeGenericClientConstructor(UnimplementedAgentsService.definition, "Agents", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateAgent: GrpcUnaryServiceInterface<CreateAgentRequest, CreateAgentResponse> = (message: CreateAgentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateAgentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateAgentResponse>, callback?: grpc_1.requestCallback<CreateAgentResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateAgent(message, metadata, options, callback);
        };
        UpdateAgent: GrpcUnaryServiceInterface<UpdateAgentRequest, UpdateAgentResponse> = (message: UpdateAgentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateAgentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateAgentResponse>, callback?: grpc_1.requestCallback<UpdateAgentResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateAgent(message, metadata, options, callback);
        };
        GetAgent: GrpcUnaryServiceInterface<GetAgentRequest, Agent> = (message: GetAgentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Agent>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Agent>, callback?: grpc_1.requestCallback<Agent>): grpc_1.ClientUnaryCall => {
            return super.GetAgent(message, metadata, options, callback);
        };
        DeleteAgent: GrpcUnaryServiceInterface<DeleteAgentRequest, DeleteAgentResponse> = (message: DeleteAgentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteAgentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteAgentResponse>, callback?: grpc_1.requestCallback<DeleteAgentResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteAgent(message, metadata, options, callback);
        };
        ListAgents: GrpcUnaryServiceInterface<ListAgentsRequest, ListAgentsResponse> = (message: ListAgentsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListAgentsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListAgentsResponse>, callback?: grpc_1.requestCallback<ListAgentsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListAgents(message, metadata, options, callback);
        };
    }
}
