/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: domains.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace fonoster.domains.v1beta2 {
    export class Domain extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            name?: string;
            domain_uri?: string;
            created_at?: number;
            updated_at?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("domain_uri" in data && data.domain_uri != undefined) {
                    this.domain_uri = data.domain_uri;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get domain_uri() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set domain_uri(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set updated_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            domain_uri?: string;
            created_at?: number;
            updated_at?: number;
        }): Domain {
            const message = new Domain({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.domain_uri != null) {
                message.domain_uri = data.domain_uri;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                domain_uri?: string;
                created_at?: number;
                updated_at?: number;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.domain_uri != null) {
                data.domain_uri = this.domain_uri;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(2, this.ref);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.domain_uri.length)
                writer.writeString(4, this.domain_uri);
            if (this.created_at != 0)
                writer.writeInt64(5, this.created_at);
            if (this.updated_at != 0)
                writer.writeInt64(6, this.updated_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Domain {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Domain();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.ref = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.domain_uri = reader.readString();
                        break;
                    case 5:
                        message.created_at = reader.readInt64();
                        break;
                    case 6:
                        message.updated_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Domain {
            return Domain.deserialize(bytes);
        }
    }
    export class EgressPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rule?: string;
            number_ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rule" in data && data.rule != undefined) {
                    this.rule = data.rule;
                }
                if ("number_ref" in data && data.number_ref != undefined) {
                    this.number_ref = data.number_ref;
                }
            }
        }
        get rule() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rule(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get number_ref() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set number_ref(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            rule?: string;
            number_ref?: string;
        }): EgressPolicy {
            const message = new EgressPolicy({});
            if (data.rule != null) {
                message.rule = data.rule;
            }
            if (data.number_ref != null) {
                message.number_ref = data.number_ref;
            }
            return message;
        }
        toObject() {
            const data: {
                rule?: string;
                number_ref?: string;
            } = {};
            if (this.rule != null) {
                data.rule = this.rule;
            }
            if (this.number_ref != null) {
                data.number_ref = this.number_ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rule.length)
                writer.writeString(1, this.rule);
            if (this.number_ref.length)
                writer.writeString(2, this.number_ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EgressPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EgressPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rule = reader.readString();
                        break;
                    case 2:
                        message.number_ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EgressPolicy {
            return EgressPolicy.deserialize(bytes);
        }
    }
    export class CreateDomainRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            domain_uri?: string;
            access_control_list_ref?: string;
            egress_policies?: EgressPolicy[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("domain_uri" in data && data.domain_uri != undefined) {
                    this.domain_uri = data.domain_uri;
                }
                if ("access_control_list_ref" in data && data.access_control_list_ref != undefined) {
                    this.access_control_list_ref = data.access_control_list_ref;
                }
                if ("egress_policies" in data && data.egress_policies != undefined) {
                    this.egress_policies = data.egress_policies;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get domain_uri() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set domain_uri(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get access_control_list_ref() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set access_control_list_ref(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get egress_policies() {
            return pb_1.Message.getRepeatedWrapperField(this, EgressPolicy, 4) as EgressPolicy[];
        }
        set egress_policies(value: EgressPolicy[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            name?: string;
            domain_uri?: string;
            access_control_list_ref?: string;
            egress_policies?: ReturnType<typeof EgressPolicy.prototype.toObject>[];
        }): CreateDomainRequest {
            const message = new CreateDomainRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.domain_uri != null) {
                message.domain_uri = data.domain_uri;
            }
            if (data.access_control_list_ref != null) {
                message.access_control_list_ref = data.access_control_list_ref;
            }
            if (data.egress_policies != null) {
                message.egress_policies = data.egress_policies.map(item => EgressPolicy.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                domain_uri?: string;
                access_control_list_ref?: string;
                egress_policies?: ReturnType<typeof EgressPolicy.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.domain_uri != null) {
                data.domain_uri = this.domain_uri;
            }
            if (this.access_control_list_ref != null) {
                data.access_control_list_ref = this.access_control_list_ref;
            }
            if (this.egress_policies != null) {
                data.egress_policies = this.egress_policies.map((item: EgressPolicy) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.domain_uri.length)
                writer.writeString(2, this.domain_uri);
            if (this.access_control_list_ref.length)
                writer.writeString(3, this.access_control_list_ref);
            if (this.egress_policies.length)
                writer.writeRepeatedMessage(4, this.egress_policies, (item: EgressPolicy) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateDomainRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateDomainRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.domain_uri = reader.readString();
                        break;
                    case 3:
                        message.access_control_list_ref = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.egress_policies, () => pb_1.Message.addToRepeatedWrapperField(message, 4, EgressPolicy.deserialize(reader), EgressPolicy));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateDomainRequest {
            return CreateDomainRequest.deserialize(bytes);
        }
    }
    export class CreateDomainResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): CreateDomainResponse {
            const message = new CreateDomainResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateDomainResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateDomainResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateDomainResponse {
            return CreateDomainResponse.deserialize(bytes);
        }
    }
    export class UpdateDomainRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            name?: string;
            access_control_list_ref?: string;
            egress_policies?: EgressPolicy[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("access_control_list_ref" in data && data.access_control_list_ref != undefined) {
                    this.access_control_list_ref = data.access_control_list_ref;
                }
                if ("egress_policies" in data && data.egress_policies != undefined) {
                    this.egress_policies = data.egress_policies;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get access_control_list_ref() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set access_control_list_ref(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get egress_policies() {
            return pb_1.Message.getRepeatedWrapperField(this, EgressPolicy, 4) as EgressPolicy[];
        }
        set egress_policies(value: EgressPolicy[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            ref?: string;
            name?: string;
            access_control_list_ref?: string;
            egress_policies?: ReturnType<typeof EgressPolicy.prototype.toObject>[];
        }): UpdateDomainRequest {
            const message = new UpdateDomainRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.access_control_list_ref != null) {
                message.access_control_list_ref = data.access_control_list_ref;
            }
            if (data.egress_policies != null) {
                message.egress_policies = data.egress_policies.map(item => EgressPolicy.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                name?: string;
                access_control_list_ref?: string;
                egress_policies?: ReturnType<typeof EgressPolicy.prototype.toObject>[];
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.access_control_list_ref != null) {
                data.access_control_list_ref = this.access_control_list_ref;
            }
            if (this.egress_policies != null) {
                data.egress_policies = this.egress_policies.map((item: EgressPolicy) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.access_control_list_ref.length)
                writer.writeString(3, this.access_control_list_ref);
            if (this.egress_policies.length)
                writer.writeRepeatedMessage(4, this.egress_policies, (item: EgressPolicy) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDomainRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDomainRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.access_control_list_ref = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.egress_policies, () => pb_1.Message.addToRepeatedWrapperField(message, 4, EgressPolicy.deserialize(reader), EgressPolicy));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDomainRequest {
            return UpdateDomainRequest.deserialize(bytes);
        }
    }
    export class UpdateDomainResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): UpdateDomainResponse {
            const message = new UpdateDomainResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDomainResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDomainResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateDomainResponse {
            return UpdateDomainResponse.deserialize(bytes);
        }
    }
    export class GetDomainRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): GetDomainRequest {
            const message = new GetDomainRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDomainRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDomainRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDomainRequest {
            return GetDomainRequest.deserialize(bytes);
        }
    }
    export class DeleteDomainRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteDomainRequest {
            const message = new DeleteDomainRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteDomainRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteDomainRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteDomainRequest {
            return DeleteDomainRequest.deserialize(bytes);
        }
    }
    export class DeleteDomainResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): DeleteDomainResponse {
            const message = new DeleteDomainResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteDomainResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteDomainResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteDomainResponse {
            return DeleteDomainResponse.deserialize(bytes);
        }
    }
    export class ListDomainsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page_size?: number;
            page_token?: string;
        }): ListDomainsRequest {
            const message = new ListDomainsRequest({});
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page_size != 0)
                writer.writeInt32(1, this.page_size);
            if (this.page_token.length)
                writer.writeString(2, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListDomainsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListDomainsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page_size = reader.readInt32();
                        break;
                    case 2:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListDomainsRequest {
            return ListDomainsRequest.deserialize(bytes);
        }
    }
    export class ListDomainsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: Domain[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, Domain, 1) as Domain[];
        }
        set items(value: Domain[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof Domain.prototype.toObject>[];
            next_page_token?: string;
        }): ListDomainsResponse {
            const message = new ListDomainsResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => Domain.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof Domain.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: Domain) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: Domain) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListDomainsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListDomainsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Domain.deserialize(reader), Domain));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListDomainsResponse {
            return ListDomainsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDomainsService {
        static definition = {
            CreateDomain: {
                path: "/fonoster.domains.v1beta2.Domains/CreateDomain",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateDomainRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateDomainRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateDomainResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateDomainResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateDomain: {
                path: "/fonoster.domains.v1beta2.Domains/UpdateDomain",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateDomainRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateDomainRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateDomainResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateDomainResponse.deserialize(new Uint8Array(bytes))
            },
            GetDomain: {
                path: "/fonoster.domains.v1beta2.Domains/GetDomain",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetDomainRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetDomainRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Domain) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Domain.deserialize(new Uint8Array(bytes))
            },
            ListDomains: {
                path: "/fonoster.domains.v1beta2.Domains/ListDomains",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListDomainsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListDomainsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListDomainsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListDomainsResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteDomain: {
                path: "/fonoster.domains.v1beta2.Domains/DeleteDomain",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteDomainRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteDomainRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteDomainResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteDomainResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateDomain(call: grpc_1.ServerUnaryCall<CreateDomainRequest, CreateDomainResponse>, callback: grpc_1.sendUnaryData<CreateDomainResponse>): void;
        abstract UpdateDomain(call: grpc_1.ServerUnaryCall<UpdateDomainRequest, UpdateDomainResponse>, callback: grpc_1.sendUnaryData<UpdateDomainResponse>): void;
        abstract GetDomain(call: grpc_1.ServerUnaryCall<GetDomainRequest, Domain>, callback: grpc_1.sendUnaryData<Domain>): void;
        abstract ListDomains(call: grpc_1.ServerUnaryCall<ListDomainsRequest, ListDomainsResponse>, callback: grpc_1.sendUnaryData<ListDomainsResponse>): void;
        abstract DeleteDomain(call: grpc_1.ServerUnaryCall<DeleteDomainRequest, DeleteDomainResponse>, callback: grpc_1.sendUnaryData<DeleteDomainResponse>): void;
    }
    export class DomainsClient extends grpc_1.makeGenericClientConstructor(UnimplementedDomainsService.definition, "Domains", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateDomain: GrpcUnaryServiceInterface<CreateDomainRequest, CreateDomainResponse> = (message: CreateDomainRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateDomainResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateDomainResponse>, callback?: grpc_1.requestCallback<CreateDomainResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateDomain(message, metadata, options, callback);
        };
        UpdateDomain: GrpcUnaryServiceInterface<UpdateDomainRequest, UpdateDomainResponse> = (message: UpdateDomainRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateDomainResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateDomainResponse>, callback?: grpc_1.requestCallback<UpdateDomainResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateDomain(message, metadata, options, callback);
        };
        GetDomain: GrpcUnaryServiceInterface<GetDomainRequest, Domain> = (message: GetDomainRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Domain>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Domain>, callback?: grpc_1.requestCallback<Domain>): grpc_1.ClientUnaryCall => {
            return super.GetDomain(message, metadata, options, callback);
        };
        ListDomains: GrpcUnaryServiceInterface<ListDomainsRequest, ListDomainsResponse> = (message: ListDomainsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListDomainsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListDomainsResponse>, callback?: grpc_1.requestCallback<ListDomainsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListDomains(message, metadata, options, callback);
        };
        DeleteDomain: GrpcUnaryServiceInterface<DeleteDomainRequest, DeleteDomainResponse> = (message: DeleteDomainRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteDomainResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteDomainResponse>, callback?: grpc_1.requestCallback<DeleteDomainResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteDomain(message, metadata, options, callback);
        };
    }
}
