/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: calls.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace fonoster.calls.v1beta2 {
    export enum CallType {
        PROGRAMMABLE = 0,
        SIP_TRUNKING = 1
    }
    export enum HangupCause {
        NORMAL_CLEARING = 0,
        CALL_REJECTED = 1,
        UNALLOCATED = 2,
        NO_USER_RESPONSE = 3,
        NO_ROUTE_DESTINATION = 4,
        NO_ANSWER = 5,
        USER_BUSY = 6,
        NOT_ACCEPTABLE_HERE = 7,
        SERVICE_UNAVAILABLE = 8,
        INVALID_NUMBER_FORMAT = 9,
        UNKNOWN = 10
    }
    export enum CallStatus {
        QUEUED = 0,
        RINGING = 1,
        IN_PROGRESS = 2,
        COMPLETED = 3,
        FAILED = 4,
        BUSY = 5,
        CANCELED = 7,
        REJECTED = 8,
        TIMEOUT = 9
    }
    export enum CallDirection {
        INBOUND = 0,
        OUTBOUND = 1
    }
    export class CallDetailRecord extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            type?: CallType;
            status?: CallStatus;
            hangup_cause?: HangupCause;
            started_at?: number;
            ended_at?: number;
            from?: string;
            to?: string;
            duration?: number;
            direction?: CallDirection;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("hangup_cause" in data && data.hangup_cause != undefined) {
                    this.hangup_cause = data.hangup_cause;
                }
                if ("started_at" in data && data.started_at != undefined) {
                    this.started_at = data.started_at;
                }
                if ("ended_at" in data && data.ended_at != undefined) {
                    this.ended_at = data.ended_at;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("direction" in data && data.direction != undefined) {
                    this.direction = data.direction;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, CallType.PROGRAMMABLE) as CallType;
        }
        set type(value: CallType) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, CallStatus.QUEUED) as CallStatus;
        }
        set status(value: CallStatus) {
            pb_1.Message.setField(this, 3, value);
        }
        get hangup_cause() {
            return pb_1.Message.getFieldWithDefault(this, 4, HangupCause.NORMAL_CLEARING) as HangupCause;
        }
        set hangup_cause(value: HangupCause) {
            pb_1.Message.setField(this, 4, value);
        }
        get started_at() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set started_at(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get ended_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set ended_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get direction() {
            return pb_1.Message.getFieldWithDefault(this, 10, CallDirection.INBOUND) as CallDirection;
        }
        set direction(value: CallDirection) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            ref?: string;
            type?: CallType;
            status?: CallStatus;
            hangup_cause?: HangupCause;
            started_at?: number;
            ended_at?: number;
            from?: string;
            to?: string;
            duration?: number;
            direction?: CallDirection;
        }): CallDetailRecord {
            const message = new CallDetailRecord({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.hangup_cause != null) {
                message.hangup_cause = data.hangup_cause;
            }
            if (data.started_at != null) {
                message.started_at = data.started_at;
            }
            if (data.ended_at != null) {
                message.ended_at = data.ended_at;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.direction != null) {
                message.direction = data.direction;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                type?: CallType;
                status?: CallStatus;
                hangup_cause?: HangupCause;
                started_at?: number;
                ended_at?: number;
                from?: string;
                to?: string;
                duration?: number;
                direction?: CallDirection;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.hangup_cause != null) {
                data.hangup_cause = this.hangup_cause;
            }
            if (this.started_at != null) {
                data.started_at = this.started_at;
            }
            if (this.ended_at != null) {
                data.ended_at = this.ended_at;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.direction != null) {
                data.direction = this.direction;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.type != CallType.PROGRAMMABLE)
                writer.writeEnum(2, this.type);
            if (this.status != CallStatus.QUEUED)
                writer.writeEnum(3, this.status);
            if (this.hangup_cause != HangupCause.NORMAL_CLEARING)
                writer.writeEnum(4, this.hangup_cause);
            if (this.started_at != 0)
                writer.writeInt64(5, this.started_at);
            if (this.ended_at != 0)
                writer.writeInt64(6, this.ended_at);
            if (this.from.length)
                writer.writeString(7, this.from);
            if (this.to.length)
                writer.writeString(8, this.to);
            if (this.duration != 0)
                writer.writeInt32(9, this.duration);
            if (this.direction != CallDirection.INBOUND)
                writer.writeEnum(10, this.direction);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CallDetailRecord {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CallDetailRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        message.status = reader.readEnum();
                        break;
                    case 4:
                        message.hangup_cause = reader.readEnum();
                        break;
                    case 5:
                        message.started_at = reader.readInt64();
                        break;
                    case 6:
                        message.ended_at = reader.readInt64();
                        break;
                    case 7:
                        message.from = reader.readString();
                        break;
                    case 8:
                        message.to = reader.readString();
                        break;
                    case 9:
                        message.duration = reader.readInt32();
                        break;
                    case 10:
                        message.direction = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CallDetailRecord {
            return CallDetailRecord.deserialize(bytes);
        }
    }
    export class CreateCallRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: string;
            to?: string;
            app_ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("app_ref" in data && data.app_ref != undefined) {
                    this.app_ref = data.app_ref;
                }
            }
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get app_ref() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set app_ref(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            from?: string;
            to?: string;
            app_ref?: string;
        }): CreateCallRequest {
            const message = new CreateCallRequest({});
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.app_ref != null) {
                message.app_ref = data.app_ref;
            }
            return message;
        }
        toObject() {
            const data: {
                from?: string;
                to?: string;
                app_ref?: string;
            } = {};
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.app_ref != null) {
                data.app_ref = this.app_ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.from.length)
                writer.writeString(1, this.from);
            if (this.to.length)
                writer.writeString(2, this.to);
            if (this.app_ref.length)
                writer.writeString(3, this.app_ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCallRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCallRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.from = reader.readString();
                        break;
                    case 2:
                        message.to = reader.readString();
                        break;
                    case 3:
                        message.app_ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCallRequest {
            return CreateCallRequest.deserialize(bytes);
        }
    }
    export class CreateCallResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): CreateCallResponse {
            const message = new CreateCallResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCallResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCallResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCallResponse {
            return CreateCallResponse.deserialize(bytes);
        }
    }
    export class ListCallsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            after?: string;
            before?: string;
            type?: CallType;
            status?: CallStatus;
            from?: string;
            to?: string;
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("after" in data && data.after != undefined) {
                    this.after = data.after;
                }
                if ("before" in data && data.before != undefined) {
                    this.before = data.before;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get after() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set after(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get before() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set before(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, CallType.PROGRAMMABLE) as CallType;
        }
        set type(value: CallType) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, CallStatus.QUEUED) as CallStatus;
        }
        set status(value: CallStatus) {
            pb_1.Message.setField(this, 4, value);
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            after?: string;
            before?: string;
            type?: CallType;
            status?: CallStatus;
            from?: string;
            to?: string;
            page_size?: number;
            page_token?: string;
        }): ListCallsRequest {
            const message = new ListCallsRequest({});
            if (data.after != null) {
                message.after = data.after;
            }
            if (data.before != null) {
                message.before = data.before;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                after?: string;
                before?: string;
                type?: CallType;
                status?: CallStatus;
                from?: string;
                to?: string;
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.after != null) {
                data.after = this.after;
            }
            if (this.before != null) {
                data.before = this.before;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.after.length)
                writer.writeString(1, this.after);
            if (this.before.length)
                writer.writeString(2, this.before);
            if (this.type != CallType.PROGRAMMABLE)
                writer.writeEnum(3, this.type);
            if (this.status != CallStatus.QUEUED)
                writer.writeEnum(4, this.status);
            if (this.from.length)
                writer.writeString(5, this.from);
            if (this.to.length)
                writer.writeString(6, this.to);
            if (this.page_size != 0)
                writer.writeInt32(7, this.page_size);
            if (this.page_token.length)
                writer.writeString(8, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCallsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCallsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.after = reader.readString();
                        break;
                    case 2:
                        message.before = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readEnum();
                        break;
                    case 4:
                        message.status = reader.readEnum();
                        break;
                    case 5:
                        message.from = reader.readString();
                        break;
                    case 6:
                        message.to = reader.readString();
                        break;
                    case 7:
                        message.page_size = reader.readInt32();
                        break;
                    case 8:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListCallsRequest {
            return ListCallsRequest.deserialize(bytes);
        }
    }
    export class ListCallsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: CallDetailRecord[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, CallDetailRecord, 1) as CallDetailRecord[];
        }
        set items(value: CallDetailRecord[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof CallDetailRecord.prototype.toObject>[];
            next_page_token?: string;
        }): ListCallsResponse {
            const message = new ListCallsResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => CallDetailRecord.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof CallDetailRecord.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: CallDetailRecord) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: CallDetailRecord) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCallsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCallsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CallDetailRecord.deserialize(reader), CallDetailRecord));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListCallsResponse {
            return ListCallsResponse.deserialize(bytes);
        }
    }
    export class GetCallRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): GetCallRequest {
            const message = new GetCallRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCallRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCallRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCallRequest {
            return GetCallRequest.deserialize(bytes);
        }
    }
    export class TrackCallRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ref?: string;
        }): TrackCallRequest {
            const message = new TrackCallRequest({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackCallRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackCallRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackCallRequest {
            return TrackCallRequest.deserialize(bytes);
        }
    }
    export class TrackCallResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            status?: CallStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, CallStatus.QUEUED) as CallStatus;
        }
        set status(value: CallStatus) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            ref?: string;
            status?: CallStatus;
        }): TrackCallResponse {
            const message = new TrackCallResponse({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                status?: CallStatus;
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(1, this.ref);
            if (this.status != CallStatus.QUEUED)
                writer.writeEnum(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackCallResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackCallResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ref = reader.readString();
                        break;
                    case 2:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackCallResponse {
            return TrackCallResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCallsService {
        static definition = {
            CreateCall: {
                path: "/fonoster.calls.v1beta2.Calls/CreateCall",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateCallRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateCallRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateCallResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateCallResponse.deserialize(new Uint8Array(bytes))
            },
            ListCalls: {
                path: "/fonoster.calls.v1beta2.Calls/ListCalls",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListCallsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListCallsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListCallsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListCallsResponse.deserialize(new Uint8Array(bytes))
            },
            GetCall: {
                path: "/fonoster.calls.v1beta2.Calls/GetCall",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCallRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCallRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CallDetailRecord) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CallDetailRecord.deserialize(new Uint8Array(bytes))
            },
            TrackCall: {
                path: "/fonoster.calls.v1beta2.Calls/TrackCall",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: TrackCallRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TrackCallRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TrackCallResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TrackCallResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateCall(call: grpc_1.ServerUnaryCall<CreateCallRequest, CreateCallResponse>, callback: grpc_1.sendUnaryData<CreateCallResponse>): void;
        abstract ListCalls(call: grpc_1.ServerUnaryCall<ListCallsRequest, ListCallsResponse>, callback: grpc_1.sendUnaryData<ListCallsResponse>): void;
        abstract GetCall(call: grpc_1.ServerUnaryCall<GetCallRequest, CallDetailRecord>, callback: grpc_1.sendUnaryData<CallDetailRecord>): void;
        abstract TrackCall(call: grpc_1.ServerWritableStream<TrackCallRequest, TrackCallResponse>): void;
    }
    export class CallsClient extends grpc_1.makeGenericClientConstructor(UnimplementedCallsService.definition, "Calls", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateCall: GrpcUnaryServiceInterface<CreateCallRequest, CreateCallResponse> = (message: CreateCallRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateCallResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateCallResponse>, callback?: grpc_1.requestCallback<CreateCallResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateCall(message, metadata, options, callback);
        };
        ListCalls: GrpcUnaryServiceInterface<ListCallsRequest, ListCallsResponse> = (message: ListCallsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListCallsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListCallsResponse>, callback?: grpc_1.requestCallback<ListCallsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListCalls(message, metadata, options, callback);
        };
        GetCall: GrpcUnaryServiceInterface<GetCallRequest, CallDetailRecord> = (message: GetCallRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CallDetailRecord>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CallDetailRecord>, callback?: grpc_1.requestCallback<CallDetailRecord>): grpc_1.ClientUnaryCall => {
            return super.GetCall(message, metadata, options, callback);
        };
        TrackCall: GrpcStreamServiceInterface<TrackCallRequest, TrackCallResponse> = (message: TrackCallRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<TrackCallResponse> => {
            return super.TrackCall(message, metadata, options);
        };
    }
}
