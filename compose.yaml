services:
  apiserver:
    image: fonoster/apiserver:latest
    restart: unless-stopped
    environment:
      APP_URL: ${APP_URL}
      DATABASE_URL: ${DATABASE_URL}
      OWNER_NAME: ${OWNER_NAME}
      OWNER_EMAIL: ${OWNER_EMAIL}
      OWNER_PASSWORD: ${OWNER_PASSWORD}
      CLOAK_ENCRYPTION_KEY: ${CLOAK_ENCRYPTION_KEY}
      IDENTITY_DATABASE_URL: ${IDENTITY_DATABASE_URL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_SENDER: ${SMTP_SENDER}
      SMTP_AUTH_USER: ${SMTP_AUTH_USER}
      SMTP_AUTH_PASS: ${SMTP_AUTH_PASS}
      INFLUXDB_URL: ${INFLUXDB_URL}
      INFLUXDB_INIT_USERNAME: ${INFLUXDB_INIT_USERNAME}
      INFLUXDB_INIT_PASSWORD: ${INFLUXDB_INIT_PASSWORD}
      INFLUXDB_INIT_ORG: ${INFLUXDB_INIT_ORG}
      INFLUXDB_INIT_BUCKET: ${INFLUXDB_INIT_BUCKET}
      INFLUXDB_INIT_TOKEN: ${INFLUXDB_INIT_TOKEN}
      ASTERISK_ARI_PROXY_URL: ${ASTERISK_ARI_PROXY_URL}
      ASTERISK_ARI_USERNAME: ${ASTERISK_ARI_USERNAME}
      ASTERISK_ARI_SECRET: ${ASTERISK_ARI_SECRET}
      NATS_URL: ${NATS_URL}
      LOGS_LEVEL: ${LOGS_LEVEL}
      LOGS_TRANSPORT: ${LOGS_TRANSPORT}
      LOGS_FORMAT: ${LOGS_FORMAT}
    ports:
      - 50051:50051
    volumes:
      - ./config/keys:/opt/fonoster/keys
      - ./config/integrations.json:/opt/fonoster/integrations.json

  routr:
    image: fonoster/routr-one:latest
    restart: unless-stopped
    environment:
      DATABASE_URL: ${ROUTR_DATABASE_URL}
      START_LOCAL_DB: "false"
      EXTERNAL_ADDRS: ${DOCKER_HOST_ADDRESS}
      LOGS_LEVEL: ${LOGS_LEVEL}
      LOGS_TRANSPORT: ${LOGS_TRANSPORT}
      RTPENGINE_HOST: ${ROUTR_RTPENGINE_HOST}
      NATS_PUBLISHER_ENABLED: "true"
      NATS_PUBLISHER_URL: ${NATS_URL}
      # TODO: We should't have to set this; please fix upstream
      LOG4J2: /etc/routr/log4j2.yaml
    ports:
      - 5060:5060/udp
      - 5060-5063:5060-5063
    volumes:
      - routrdb:/var/lib/postgresql/data

  # RTPEngine uses a range of ports to handle RTP traffic. Because exposing a large range of ports 
  # is not possible in Docker, we need to use network_mode: host.
  #
  # Unfortunately, network_mode: host is not supported in Docker for Windows or Mac.
  # In those cases, we need to use a different approach.
  #
  # By default we are opening a small range of ports (10000-10100) to handle RTP traffic.
  # However, this is not enough for production environments.
  #
  # We recommend that when using Linux you use network_mode: host and remove the ports section.
  rtpengine:
    image: fonoster/rtpengine:latest
    restart: unless-stopped
    platform: linux/x86_64
    ports: 
      - 10000-10100:10000-10100/udp
      - 8080:8080
    environment:
      PUBLIC_IP: ${DOCKER_HOST_ADDRESS}
      PORT_MIN: 10000
      PORT_MAX: 10100

  asterisk01:
    image: fonoster/asterisk:latest
    restart: unless-stopped
    environment:
      ARI_PROXY_URL: ${ASTERISK_ARI_PROXY_URL}
      ARI_USERNAME: ${ASTERISK_ARI_USERNAME}
      ARI_SECRET: ${ASTERISK_ARI_SECRET}
      SIPPROXY_HOST: ${ASTERISK_SIPPROXY_HOST}
      SIPPROXY_PORT: ${ASTERISK_SIPPROXY_PORT}
      SIPPROXY_USERNAME: ${ASTERISK_SIPPROXY_USERNAME}
      SIPPROXY_SECRET: ${ASTERISK_SIPPROXY_SECRET}
      RTP_PORT_START: ${ASTERISK_RTP_PORT_START}
      RTP_PORT_END: ${ASTERISK_RTP_PORT_END}
      DTMF_MODE: ${ASTERISK_DTMF_MODE}
      CODECS: ${ASTERISK_CODECS}
    expose:
      - 6060

  asterisk02:
    image: fonoster/asterisk:latest
    restart: unless-stopped
    environment:
      ARI_PROXY_URL: ${ASTERISK_ARI_PROXY_URL}
      ARI_USERNAME: ${ASTERISK_ARI_USERNAME}
      ARI_SECRET: ${ASTERISK_ARI_SECRET}
      SIPPROXY_HOST: ${ASTERISK_SIPPROXY_HOST}
      SIPPROXY_PORT: ${ASTERISK_SIPPROXY_PORT}
      SIPPROXY_USERNAME: ${ASTERISK_SIPPROXY_USERNAME}
      SIPPROXY_SECRET: ${ASTERISK_SIPPROXY_SECRET}
      RTP_PORT_START: ${ASTERISK_RTP_PORT_START}
      RTP_PORT_END: ${ASTERISK_RTP_PORT_END}
      DTMF_MODE: ${ASTERISK_DTMF_MODE}
      CODECS: ${ASTERISK_CODECS}
    expose:
      - 6060

  postgres:
    image: postgres:16.2-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: UTC
      PGTZ: UTC
    expose:
      - 5432
    volumes:
      - db:/var/lib/postgresql/data

  influxdb:
    image: influxdb:2
    restart: unless-stopped
    expose:
      - 8086
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_INIT_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_INIT_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_INIT_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_INIT_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_INIT_TOKEN}
      INFLUXD_LOG_LEVEL: ${LOGS_LEVEL}
    volumes:
      - influxdb:/var/lib/influxdb2

  envoy:
    image: envoyproxy/envoy:v1.22.0
    restart: unless-stopped
    volumes:
      - ./envoy.yaml:/etc/envoy/envoy.yaml:ro
    ports:
      - 7171:7171

  nats:
    image: nats:latest
    restart: unless-stopped
    expose:
      - 4222

volumes:
  db:
  routrdb:
  influxdb:
